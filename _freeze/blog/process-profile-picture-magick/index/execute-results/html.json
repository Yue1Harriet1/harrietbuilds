{
  "hash": "ddcae00abd48edd4430192f3c8c0c0f6",
  "result": {
    "markdown": "---\ntitle: Process Profile Pictures with magick\nauthor: Garrick Aden-Buie\ndate: '2022-07-12'\nslug: process-profile-picture-magick\ncategories:\n  - R\n  - Images\n  - Interesting Uses of R\ndescription: |\n  Process a directory full of profile pictures, resizing and cropping the images\n  to be centered around faces.\nimage: feature.png\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2022/process-profile-picture-magick/index.Rmarkdown'\nkeywords: rstats\neditor_options:\n  chunk_output_type: console\npost_data:\n  photos:\n    - id: DItYlc26zVI\n      credit: christian buehner\n    - id: bpxgyD4YYt4\n      credit: Eunice Lituañas\n    - id: 6anudmpILw4\n      credit: Foto Sushi\n    - id: 3dqSZidOkvs\n      credit: Eye for Ebony\nresources:\n  - profiles\n  - profiles_cropped\nbump: 2\n---\n\n\n<!-- Links -->\n\n\n\n\n\n## rstudio::conf(2022) runs on R\n\n[rstudio::conf(2022)](https://rstudio.com/conference) is just around the corner!\nThis year,\nI've been fortunate to be part of the conference program committee,\nthe small group of RStudio people who gather and evaluate talk submissions,\nmake the tough scheduling decisions about the sessions and talks in the conference program,\nand generally wrangle and herd all the speaker and talk information into the final schedule.\n\nMy favorite part of the process —\napart from seeing all of the wonderful and creative ways\nour community approaches data science with R (okay, and Python too) —\nis finding out how many creative ways **we** use R\nto manage the conference.\nLet's just say Jenny Bryan is a literal Google Forms/Sheets/Drive wizard.\n\nOne of the things I love about R\nis the cycle of starting a task wondering\n_Can I do this with R?_\nand ending with\n_Wow, I can do this with R!_\nI've been using R for a while and I'm still occasionally surprised\nwhen I find myself on this virtuous loop.\n\nThis post is about an otherwise mundane conference admin task\nthat would have involved a lot of manual labor\n(in the form of clicks and mouse movements)\nthat I automated with the help of a few R packages.\nMaybe in future posts I'll share\nmore cool things that we did with R\nin the making of rstudio::conf.\n\nOh and I hope to see you there,\neither in person, online or on Twitter at\n[#RStudioConf2022](https://twitter.com/search?q=%23RStudioConf2022)!\nLearn more at [rstd.io/conf](https://rstudio.com/conference).\n\n## Send me your profile picture, please\n\nSuppose you've asked 100-ish people to send you a profile picture\nand to your surprise they all followed through and sent you an actual image.\n\nBut, of course, you now have a new problem.\nEach of those 100-ish people has used slightly different sizes for their profile picture.\nThey're all sorts of different shapes, sizes, and resolutions.\n\nSome people's profile images feature their faces, centered and tightly cropped.\nOthers are photographed at a distance or off-center.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<figure class=\"mx-auto\" style=\"width: 66vw; max-width: 100%\">\n<img alt=\"A profile picture of a man, early 30s and smiling, against a soft gray background.\" src=\"profiles/DItYlc26zVI.jpg\"/>\n<figcaption>\nAn example profile picture you received.\nImage by <a href=\"https:/unsplash.com/photos/DItYlc26zVI\">christian buehner</a>.\n</figcaption>\n</figure>\n```\n:::\n:::\n\n\nIn their final placement,\nyou want all of the profile images to be circular images\ncentered on the person's face as much as possible.\nIf we took the image above and simply centered it inside a circle,\nwe would get something like this:\n\n<div class=\"p-3 text-center rounded-circle mx-auto shadow-lg\" style=\"background-size: cover; background-image: url(profiles/DItYlc26zVI.jpg); width: 200px; height: 200px\">\n<div class=\"visually-hidden\">The example profile image clipped to fit a circular avatar image. The subject appears at the right edge of the circle. About 40% of their face is clipped.</div>\n</div>\n\nObviously, we'd rather not clip half of the person out of their profile image,\nso we'll need to edit this photo.\nBut there are hundreds of them and most of them will need _some_ adjustment.\n\nGood news! You have access to R,\nwhere we can use tools like magick to read and process the images,\nor face detection with neural networks.\nSo with a few hours of work you can save yourself\n[an hour of mindless clicking](https://xkcd.com/1319).\nLet's do this!\n\n## Collect the Profile Pictures\n\nTo see how this all works,\nI've downloaded four example profile pictures from [unsplash](https://unsplash.com)[^1].\n\n\n\n\n\n```r\ndir.create(\"profiles\")\nphoto_ids <- c(\"DItYlc26zVI\", \"bpxgyD4YYt4\", \"6anudmpILw4\", \"3dqSZidOkvs\")\n\nfor (id in photo_ids) {\n  download.file(\n    sprintf(\"https://source.unsplash.com/%s\", id),\n    sprintf(\"profiles/%s.jpg\", id)\n  )\n}\n```\n\nI've put the photos in a `profiles/` directory\nso that I can list the them all at once:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_ls(\"profiles\")\n## profiles/3dqSZidOkvs.jpg profiles/6anudmpILw4.jpg profiles/DItYlc26zVI.jpg \n## profiles/bpxgyD4YYt4.jpg\n```\n:::\n\n\n## Magick with R\n\nThe first step is to use the magick package to read in our profile pictures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magick)\nlibrary(purrr)\n\nprofiles <-\n  fs::dir_ls(\"profiles\") |>\n  map(image_read)\n\nprofiles\n## $`profiles/3dqSZidOkvs.jpg`\n##   format width height colorspace matte filesize density\n## 1   JPEG  1080    810       sRGB FALSE   135368   72x72\n## \n## $`profiles/6anudmpILw4.jpg`\n##   format width height colorspace matte filesize density\n## 1   JPEG  1080    720       sRGB FALSE    46181   72x72\n## \n## $`profiles/DItYlc26zVI.jpg`\n##   format width height colorspace matte filesize density\n## 1   JPEG  1080    720       sRGB FALSE    87827   72x72\n## \n## $`profiles/bpxgyD4YYt4.jpg`\n##   format width height colorspace matte filesize density\n## 1   JPEG  1080    608       sRGB FALSE    80277   72x72\n```\n:::\n\n\nHere are the four profiles.\nAs you can see, they come in a variety of sizes\nand the person in the frame is rarely centered.\n\n::: text-center\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-alt='Four profile pictures of irregular sizes in a 2 by 2 grid. None of the\nsubjects are perfectly centered in the images. Clockwise: a late 20s\nblack woman against a green, natural background; a mid-50s white male on a\ngray background; a mid-20s woman in a blue shirt against a tan background;\nan early-30s male with curly hair and a floral print shirt on a light gray\nbackground.' width=250}\n:::\n:::\n\n:::\n\n## Finding Faces\n\nNow for the most fun of this entire post.\nAfter a quick search on [r-pkg.org](https://r-pkg.org),\nI found a few packages that provide methods for\n[facial detection](https://r-pkg.org/search.html?q=face+detect);\nI tried [image.libfacedetection](https://github.com/bnosac/image) first\nand it worked out so well that I didn't have to look any further on the list.\n\nAs it says on the CRAN page, image.libfacedetection is\n\n> An open source library for face detection in images.\n> Provides a pretrained convolutional neural network based on\n> <https://github.com/ShiqiYu/libfacedetection> which can be used\n> to detect faces which have size greater than 10x10 pixels.\n\nThe best feature — apart from reliably detecting faces —\nis that it works really well with magick.\nThe core functionality is all wrapped up in a single function,\n`image.libfacedetection::image_detect_faces()`,\nand the example in the\n[README](https://cran.rstudio.com/web/packages/image.libfacedetection/readme/README.html)\ntells you just about everything you need to know.\n\nIn short, after reading the image into R with `magick::image_read()`,\nyou can call `image_detect_faces()` to find faces in the image.\n`image_detect_faces()` returns data about the detected faces,\nand you can use its `plot()` method to overlay boxes over the found faces\nin the image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(image.libfacedetection)\nfaces <- all_profiles |> image_detect_faces()\nplot(faces, all_profiles, only_box = TRUE)\n```\n:::\n\n::: {.cell class.chunk='tc'}\n:::: {.tc}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-alt='The four profile images from the previous example. A red square outline\nmarking the detected face regions has been overlaid over each face in the\nexamples profile images.' width=250}\n:::\n::::\n:::\n\n\n`image_detect_faces()` returns some interesting data about the detected faces:\n\n> The data frame detections indicates the locations of these.\n> This data.frame has columns `x`, `y`, `width` and `height`\n> as well as a column called `confidence`.\n> The values of `x` and `y` are the top left of the start of the box.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfaces\n## $nr\n## [1] 4\n## \n## $detections\n##     x   y width height confidence landmark1_x landmark1_y landmark2_x\n## 1 153  48    43     57         99         158          70         175\n## 2 140 239    43     58         99         150         260         171\n## 3 365  64    33     44         99         373          79         387\n##   landmark2_y landmark3_x landmark3_y landmark4_x landmark4_y landmark5_x\n## 1          68         162          80         162          92         177\n## 2         260         160         272         151         282         168\n## 3          80         377          86         372          94         385\n##   landmark5_y\n## 1          89\n## 2         282\n## 3          95\n##  [ reached 'max' / getOption(\"max.print\") -- omitted 1 rows ]\n## \n## attr(,\"class\")\n## [1] \"libfacedetection\"\n```\n:::\n\n\nSince we asked for a profile picture,\nwe can reasonably expect that there's only one person in the image.\nSo we'll take the detection with the highest confidence\n(in case something else registers as a face),\nand find the center of the detected region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind_face_center <- function(image) {\n  detections <- image.libfacedetection::image_detect_faces(image)$detections\n  best_face <- which(detections$confidence == max(detections$confidence))\n  dims <- as.list(detections[best_face[[1]], ])\n  list(\n    x = dims$x + dims$width / 2,\n    y = dims$y + dims$height / 2\n  )\n}\n```\n:::\n\n\n\n\nSo when applied to our example profile image,\nwe find that our subject's face is centered at\n(697.5, 290).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nface_center <- find_face_center(profiles[[3]])\nstr(face_center)\n## List of 2\n##  $ x: num 698\n##  $ y: num 290\n```\n:::\n\n::: {.cell class.chunk='text-center'}\n:::: {.text-center}\n::: {.cell-output-display}\n![](index_files/figure-html/find-face-center-image-1.png){fig-alt='The primary example profile image, with a medium yellow dot placed on the\nman\\'s nose marking the center of his face as detected by the algorithm.' width=75%}\n:::\n::::\n:::\n\n\nIn the next steps, we'll resize and crop the photo\nso that it's centered, as much as possible, on this point.\n\n## Resize\n\nOur goal is to resize and crop the photo into an 600px square image.\nIf we start with an image smaller than 600px in either dimension,\nthen we won't scale up.\nWe also take another shortcut:\nsince most people will provide a profile image\nthat prominently features their face,\nwe can start by shrinking the smaller side of the image\ndown to match the desired image size.\n\nThis shortcut keeps us from perfectly framing the person's face.\nSometimes their face is too close to the edge of the picture,\nand in other cases there may be negative space around their head\nthat will end up in the cropped profile image.\nI'd argue that this is okay.\nIt keeps our cropping from being _too perfect_\nand the final images still retain some of the character of the original photo.\n\nOur example profile image is\n1080px wide and\n720px tall,\nso we'll resize the image proportionally down to an image\nwith height 600px.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresize_fit <- function(image, size = 600) {\n  info <- image_info(image)\n  size <- min(size, info$width, info$height)\n  image_resize(\n    image,\n    geometry_size_pixels(\n      height = if (info$width >= info$height) size,\n      width = if (info$height > info$width) size\n    )\n  )\n}\n```\n:::\n\n\nWhen applied to our example profile image,\nwe end up with a 900px &times; 600px image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresized_profile <-\n  profiles[[3]] |>\n  resize_fit()\n\nresized_profile |> image_info()\n##   format width height colorspace matte filesize density\n## 1   JPEG   900    600       sRGB FALSE        0   72x72\n```\n:::\n\n\nIn the next step,\nwe'll figure out which 600px horizontal region\nbest covers the person's face.\n\n## Find Resized Faces\n\nWait.\nI showed the face-center discovery step above\nbecause it's the coolest part of this pipeline,\nbut we don't actually perform the facial detection first.\nWe need to know where the person's face is located\n**after** we scale down their profile image.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresized_profile |>\n  find_face_center()\n## $x\n## [1] 579\n## \n## $y\n## [1] 240.5\n```\n:::\n\n\n## Cropping\n\nNow that we know where the center `point` of the person's face is located in the image,\nand also because we've already resized the image so we don't have to worry about\nits height,\nwe only need to crop the image in one direction.\nThe problem now is that\nwe need to pick a 600px `width` region within the full 900px `range`.\n\n\n```\n           point\n|------[=====*=====]---|\n       ^~~ width ~~^\n^......................^ range\n```\n\nThis isn't too complicated.\nThere are three cases:\n\n1. The `point` is so close to the start of the `range`\n   that it we can't center the point in our `width`\n   and instead have to start at 0.\n1. Similarly, the `point` might be so close to the end of the `range`\n   that our crop `width` lines up with the end. Or, in other words,\n   the crop width starts at `range - width`.\n1. Or finally, we can center the `point` in our crop `width`,\n   so it should start at `point - width/2`.\n1. Oh, and there's an edge case: if the `width` is greater than or equal to\n   the full `range`, then the offset is 0, too.\n\nThis logic gives us the following `crop_offset()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrop_offset <- function(point, range, width) {\n  # 4. Catch the edge case first\n  if (width >= range) return(0)\n\n  if ((point - width / 2) < 0) {\n    # 1. must start at left edge\n    return(0)\n  }\n  if ((point + width / 2) > range) {\n    # 2. must start at right edge\n    return(range - width)\n  }\n  # 3. enough space on both sides to center width in range\n  point - width / 2\n}\n```\n:::\n\n\nWhich in our example case tells us that we could crop our resized profile image\nto a 600px square,\noffset by the following amount in the `x` direction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffset <- crop_offset(\n  point = 579,\n  range = 900,\n  width = 600\n)\noffset\n## [1] 279\n```\n:::\n\n\nWe can use `magick::image_crop()` with the `magick::geometry_area()` helper function:\n\n\n\n\n\n::: text-center\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/resized-cropped-1.png){fig-alt='The example profile image, cropped to a square\nand centered on the man\\'s face.' width=50%}\n:::\n:::\n\n:::\n\nWhen this image is used as a profile or avatar picture,\nit ends up looking much better than the uncropped and uncentered version!\n\n<div class=\"p-4 text-center rounded-circle mx-auto shadow-lg\" style=\"background-size: cover; background-image: url(index_files/figure-html/resized-cropped-1.png); width: 200px; height: 200px\">\n<div class=\"visually-hidden\">The example profile image cropped and centered to fit a circular avatar image. The subject appears directly in the middle of the circle.</div>\n</div>\n\n## Put it all together\n\nThe last step is to put everything we've sketched out above\ninto a single function that takes a [magick]{.pkg} image\nand returns a new cropped and centered version.\nAnd here's that function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresize_crop_to_face <- function(image, size = 600) {\n  image <- resize_fit(image, size)\n  info <- image_info(image)\n\n  # size may have changed after refit\n  size <- min(info$height, info$width)\n\n  is_image_square <- info$width == info$height\n  if (is_image_square) {\n    return(image)\n  }\n\n  face <- find_face_center(image)\n\n  image_crop(\n    image,\n    geometry = geometry_area(\n      width = size,\n      height = size,\n      x_off = crop_offset(face$x, info$width, size),\n      y_off = crop_offset(face$y, info$height, size)\n    )\n  )\n}\n```\n:::\n\n\nStarting over from the beginning,\nwe can read all of the profile images\nand resize and crop them around the subject's face\nin just a few lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprofiles <-\n  fs::dir_ls(\"profiles\") |>\n  map(image_read) |>\n  map(resize_crop_to_face)\n```\n:::\n\n\nand then we can write them back into the profiles directory.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_create(\"profiles_cropped\")\n\nprofiles |>\n  iwalk(function(image, path) {\n    new_path <- fs::path(\"profiles_cropped\", fs::path_file(path))\n    image_write(image, new_path)\n  })\n```\n:::\n\n\nThe end result is four perfect profile pictures!\n\n\n::: {.cell}\n\n:::\n\n\n::: {.d-flex .flex-row .flex-wrap}\n`<div class=\"p-3 text-center rounded-circle m-3 shadow-lg\" style=\"background-size: cover; background-image: url(profiles_cropped/3dqSZidOkvs.jpg); width: 250px; height: 250px\">\n<div class=\"visually-hidden\">A young black woman, centered in the image, against a green background.</div>\n</div> <div class=\"p-3 text-center rounded-circle m-3 shadow-lg\" style=\"background-size: cover; background-image: url(profiles_cropped/6anudmpILw4.jpg); width: 250px; height: 250px\">\n<div class=\"visually-hidden\">An older white man on a gray background, centered in the image.</div>\n</div> <div class=\"p-3 text-center rounded-circle m-3 shadow-lg\" style=\"background-size: cover; background-image: url(profiles_cropped/DItYlc26zVI.jpg); width: 250px; height: 250px\">\n<div class=\"visually-hidden\">The example profile: a young white male centered in the image.</div>\n</div> <div class=\"p-3 text-center rounded-circle m-3 shadow-lg\" style=\"background-size: cover; background-image: url(profiles_cropped/bpxgyD4YYt4.jpg); width: 250px; height: 250px\">\n<div class=\"visually-hidden\">A young woman against a tan background, centered in the image.</div>\n</div>`{=html}\n:::\n\n[^1]: Images by <a href=\"https:/unsplash.com/photos/DItYlc26zVI\">christian buehner</a>, <a href=\"https:/unsplash.com/photos/bpxgyD4YYt4\">Eunice Lituañas</a>, <a href=\"https:/unsplash.com/photos/6anudmpILw4\">Foto Sushi</a>, and <a href=\"https:/unsplash.com/photos/3dqSZidOkvs\">Eye for Ebony</a>.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}