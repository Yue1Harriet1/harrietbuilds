{
  "hash": "af406ddb5aee8e24ae45c5d303d92e78",
  "result": {
    "markdown": "---\ntitle: 'Signed and verified: signed git commits with Keybase and RStudio'\nauthor: Garrick Aden-Buie\ndate: '2021-09-13'\nslug: signed-verified-git-commits-keybase-rstudio\ncategories:\n  - R\n  - git\n  - GitHub\n  - RStudio\n  - Tutorials\ndescription: \"Setting up signed git commits with a Keybase GPG key that works with RStudio.\"\nimage: social.png\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2021/signed-verified-git-commits-keybase-rstudio/index.Rmarkdown'\nkeywords: \"rstats\"\nreferences: ~\n---\n\n\n<!-- Links -->\n[github-signed-commits]: https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/signing-commits\n[keybase]: https://keybase.io\n[homebrew]: https://brew.sh\n[git]: https://git-scm.com/\n[rstudio]: https://www.rstudio.com\n[gpg]: https://gnupg.org/\n[twitter]: https://twitter.com\n[github]: https://github.com\n\n\n\n\n\n\n::: lead\nCryptographically sign all of your commits\nwith a GPG key managed by Keybase,\nproving to GitHub and the world that you are a real person who really wrote your code\nand getting that neat **Verified** badge next to all of your commits.\n\nAlong the way, we'll also make sure everything is set up in a way that plays nicely with RStudio.\n:::\n\n::: center\n![A verified commit on GitHub with the green _Verified_ badge.](verified.png)\n:::\n\n## Overview\n\nDid you know it's incredibly easy to\n[spoof commit authors with git](https://blog.gruntwork.io/how-to-spoof-any-user-on-github-and-what-to-do-to-prevent-it-e237e95b8deb)?\nBasically, you only need to tell `git` you're a different person.\n\n```bash\ngit config --global user.email \"hadley@...\"\ngit config --glboal user.name \"Hadley Wickham\"\n\n# pretend to commit as Hadley\ngit commit -m \"Fix recode() arguments to new = old\"\n```\n\n`git` _doesn't do anything_ to verify the commit author and,\nwhile GitHub will try a little harder than `git`,\nit's surprisingly easy to pretend to be somewhere else in a git repo.\n\nThis can obviously lead to problems\n(that are admittedly mostly theoretical in my daily life)\nand there's a relatively easy solution: signed commits.\nWith signed commits,\nyou cryptographically sign each commit with your private key that only you own,\nand GitHub (and others) will verify your signature with the public key pair.\nWhen GitHub knows that the real you made the commit,\nit adds the green\n<img src=\"verified-small.png\" alt=\"verified\" style=\"display:inline;margin:0;vertical-align:middle\" height=\"24\">\nbadge.\n\nIn this post,\nI'll show you how to use Keybase to create your own GPG key.\nThen we'll set up `git` to use this key to sign your commits,\nand along the way we'll configure `git` to work with RStudio, too.\nI'm using a Mac, but the process is very similar for Linux/Unix\nmachines^[Windows users, I'm sorry! I don't own anything that runs Windows. &#x1F612;].\n\n## Set up signed and verified commits\n\n### Install Keybase and GPG\n\nWe need at least four pieces of software to make this work.\nI'm hoping you have [git][^git-version] and [RStudio] installed;\nthe two new things you'll probably need are [Keybase] and [gpg].\n\n[^git-version]: You'll need `git` version 2.0 or later. Check with `git --version` or upgrade git to the latest version with `brew install git`.\n\nThe easiest way to install both is with the MacOS package manager, [homebrew].\n(If homebrew is new to you, head over to https://brew.sh/ to learn more and to grab the installation command.)\n\n```bash\nbrew install gpg\nbrew install --cask keybase\n```\n\nThe first line installs `gpg`,\nthe [GNU Privacy Guard][gpg] command line tool.\nIt manages the cryptographic steps:\nsigning or encoding files with your personal GPG key.\n\n[Keybase] is\n_key directory that maps social media identities to encryption keys in a publicly auditable manner^[https://en.wikipedia.org/wiki/Keybase]_.\nIn other words,\nKeybase is place to store encryption keys\nand to link your identity (and those keys)\nto your public identities such as your accounts on [Twitter] or [GitHub].\nOne advantage of Keybase is that its app and command line tool\nmake it relatively easy to generate and store GPG keys.\nIt's also a great way to share that key between your own computers.\n\n### Create a GPG key with Keybase\n\nIf you don't have a Keybase account,\nopen the Keybase app that we installed with `brew`.\nTheir app will guide you through the process of creating an account.\n\nOnce you have a Keybase account,\nhead back to the command line[^or-keybase-app]\nto create a new GPG key.\nNote that the `keybase` cli uses the `pgp` command,\nbut we've been talking about _GPG_ keys.\nTo most people, the terms GPG and PGP are functionally interchangeable:\nGPG is the [GNU Privacy Guard][gpg]\nwhich is an open-source version of\nPGP ([Pretty Good Privacy](https://en.wikipedia.org/wiki/Pretty_Good_Privacy)).\n\n[^or-keybase-app]: You could also create a GPG/PGP key in the Keybase app in the identities section of your profile, but I'm using the command line so it's easier to copy-paste.\n\n```bash\nkeybase pgp gen --multi\n```\n```\nEnter your real name, which will be publicly visible in your new key: Garrick Aden-Buie\nEnter a public email address for your key: garrick@adenbuie.com\nEnter another email address (or <enter> when done):\nPush an encrypted copy of your new secret key to the Keybase.io server? [Y/n] Y\nWhen exporting to the GnuPG keychain, encrypt private keys with a passphrase? [Y/n] Y\n▶ INFO PGP User ID: Garrick Aden-Buie <garrick@adenbuie.com> [primary]\n▶ INFO Generating primary key (4096 bits)\n▶ INFO Generating encryption subkey (4096 bits)\n▶ INFO Generated new PGP key:\n▶ INFO   user: Garrick Aden-Buie <garrick@adenbuie.com>\n▶ INFO  4096-bit RSA key, ID B606B038A1A5CE20, created 2021-09-12\n▶ INFO Exported new key to the local GPG keychain\n```\n\nTo recap the process:\n\n- `keybase` will first ask you for your real name and email address.\n  Make sure these match your identity on GitHub, or at least a\n  [verified email that you use on GitHub](https://github.com/settings/emails).\n\n- Then choose `Y` to push a copy of the key to Keybase\n  and `Y` again to add give your private key a passphrase.\n\n- After a few seconds, Keybase asks for your account password\n  and then prompts you to enter a passphrase for your GPG key.\n\nAt the end of the output, note your key's ID —\nin my case, `B606B038A1A5CE20`.\nYou should also be able to find your key on your Keybase profile,\nor list your local keys that `gpg` knows about with\n\n```bash\ngpg --list-secret-keys --keyid-format LONG\n```\n```\n/Users/garrick/.gnupg/pubring.kbx\n---------------------------------\nsec   rsa4096/B606B038A1A5CE20 2021-09-13 [SC] [expires: 2037-09-09]\n      87888BBEBC09E6093A8310F9B606B038A1A5CE20\nuid                 [ unknown] Garrick Aden-Buie <garrick@adenbuie.com>\nssb   rsa4096/F4435076C9C363BD 2021-09-13 [E] [expires: 2037-09-09]\n```\n\nNotice that we again see our key id,\n`B606B038A1A5CE20`, in the third line of the output.\nThere's also the `[ unknown]` on line 5 next to our name.\nThis indicates that `gpg` isn't totally confident about this key yet\nand we need to tell `gpg` that it can be trusted.\n\n### Trust your own key, ultimately\n\nOpen the `gpg` interactive prompt to edit your key, then run `trust`,\nchoose `I trust ultimately` and finally run `save`.\n\n```bash\ngpg --edit-key B606B038A1A5CE20\n```\n```\ngpg> trust\n# Please decide how far you trust this user to correctly verify other users' keys\n# (by looking at passports, checking fingerprints from different sources, etc.)\n#\n#   1 = I don't know or won't say\n#   2 = I do NOT trust\n#   3 = I trust marginally\n#   4 = I trust fully\n#   5 = I trust ultimately\n#   m = back to the main menu\n#\n# Your decision? 5\n# Do you really want to set this key to ultimate trust? (y/N) y\n\ngpg> save\n# Key not changed so no update needed.\n```\n\nNow if you run `gpg --list-secret-keys` again,\nyou'll see `[ultimate]` next to your name.\n\n```bash\ngpg --list-secret-keys --keyid-format LONG\n```\n```\n/Users/garrick/.gnupg/pubring.kbx\n---------------------------------\nsec   rsa4096/B606B038A1A5CE20 2021-09-13 [SC] [expires: 2037-09-09]\n      87888BBEBC09E6093A8310F9B606B038A1A5CE20\nuid                 [ultimate] Garrick Aden-Buie <garrick@adenbuie.com>\nssb   rsa4096/F4435076C9C363BD 2021-09-13 [E] [expires: 2037-09-09]\n```\n\n### Configure git to always sign your commits\n\nSetting `git` to always sign your commits is straightforward.\nUpdate the git global config to sign commits using your default key\nwith the following two commands,\nreplacing my key id in the first command with _your_ key id.\n\n```bash\ngit config --global user.signingkey B606B038A1A5CE20\ngit config --global commit.gpgsign true\n```\n\n### Add your key to GitHub\n\nNow you need to tell GitHub about your new GPG key.\nUsing your key id, ask Keybase to export the public key that matches your private GPG key.\nHere we'll pipe it to `pbcopy` to copy it into the system clipboard.\n\n```bash\nkeybase pgp export -q B606B038A1A5CE20 | pbcopy\n```\n\nThen head over to [github.com/settings/keys](https://github.com/settings/keys),\nclick on **New GPG key**,\nand paste and add your key into GitHub.\n\n### Check your signed commit powers\n\nAt this point,\n`git` will _try_ to sign your commits,\nbut if you're also using MacOS like me\nthere's a good chance you'll run into a problem when you try to commit a file.\n\n```bash\n# in a git repo\ntouch test.txt\ngit add test.txt\ngit commit -m \"test signed commits\"\n# error: gpg failed to sign the data\n# fatal: failed to write commit object\n```\n\nThis error message isn't entirely helpful,\nbut you can try to sign some random text with `gpg`\nto expose the underlying error.\n\n```bash\necho \"test\" | gpg --clear-sign\n```\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\ntest\ngpg: signing failed: Inappropriate ioctl for device\ngpg: [stdin]: clear-sign failed: Inappropriate ioctl for device\n```\n\nThe problem in my case is that I have an \"Inappropriate ioctl for device\".\nTake that error to your [favorite web search engine](https://duckduckgo.com)\nand you'll find a resolution.\nIf you also run into this `ioctl` error,\nyou need to add the following line to `~/.zshrc` (if you're using\n[Z shell](https://en.wikipedia.org/wiki/Z_shell), the latest default on MacOS) or `~/.profile`:\n\n```bash\nexport GPG_TTY=$(tty)\n```\n\nSave the file and then close and re-open your terminal window.\nWhen you test `gpg` signing again,\nyou should be prompted with a full-terminal prompt to enter your password.\n\n```bash\necho \"test\" | gpg --clear-sign\n```\n```\n\n ┌───────────────────────────────────────────────────────────────┐\n │ Please enter the passphrase to unlock the OpenPGP secret key: │\n │ \"Garrick Aden-Buie <garrick@adenbuie.com>\"                    │\n │ 4096-bit RSA key, ID B606B038A1A5CE20,                        │\n │ created 2021-09-13.                                           │\n │                                                               │\n │                                                               │\n │ Passphrase: _________________________________________________ │\n │                                                               │\n │         <OK>                                   <Cancel>       │\n └───────────────────────────────────────────────────────────────┘\n\n```\n\nEnter your key's passphrase and, if everything works, you should see a message like this:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\ntest\n-----BEGIN PGP SIGNATURE-----\n\niQIzBAEBCAAdFiEEh4iLvrwJ5gk6gxD5tgawOKGlziAFAmE/UYkACgkQtgawOKGl\nziAzgg/7Bl6cCapi+k2OrxPafl811G4x7fC4PQWCJKWXinUjkZK/8+o6jM+ZQp+4\ngc1wv0gBfNyKNkTmMg/qiQhuLYiujSH9pyjaoMgO9QoYvUuPituSjV7RQOfAhlHD\nN+wgkACPd3PH2kQVFj8Jw3Nkesrpgby9t/S6sSiLZf284rMfx31ua1/l4tsHWowP\n5a+FRujDtarWJ1/zL9pgMkr9kkWEejqpzGVLrVKrB3xsPLyGnPf8BW+an7CwkkDS\numJulX3Ck1u14DRgIyj4VdwfCkkCle0uyZcLorZsqDP5GC/3ZKcpDe6XgSSKz0O0\nHVvm4bTqBBmesVNWHVuFmYGmmXFU/sYvYoHOy3wvLiCu/hbRhBvboUcogW79/PWR\nGw/DYln5W1ClIKH9LsU0GpydSTMMhXZySEp+r1OCl4sQqKCe6Ka3ex+3lOHyym7F\nU5rgfH6tmu6U2Jtn8QEFg106vxQDQ76TIRVS9xvicH98PJQnhoyg3jtu5tMbITz1\noev0Z11vq76mw3MFmVx455AVqxplGM/4qB9HsmNWTsi0fGoFa/vlbBN3vJQn0xaX\n2PSXKWlkZiyd+WplWsOH2OnZ8V8s2cHNxlKsSPrWQNflYsDtO8vANwAFjiJK2Bkq\nYLPCcwzEVSwFrLRRXt5Crcpc/32ZqrfvcLe0G+ACWQYAhktwJnQ=\n=S1iU\n-----END PGP SIGNATURE-----\n```\n\nAnd if you try to `git commit` again, it should work!\n\n```bash\ngit commit -m \"test signed commits\"\n```\n```\n[main (root-commit) 4c4573f] test signed commits\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 test.txt\n```\n\nNote that you can be extra sure by looking at the `git` log with signatures.\n\n```bash\ngit log --show-signature\n```\n```\ncommit 4c4573f2fbed44eab6c0f4a08a38a9f8292580cf (HEAD -> main)\ngpg: Signature made Mon Sep 13 09:34:59 2021 EDT\ngpg:                using RSA key 87888BBEBC09E6093A8310F9B606B038A1A5CE20\ngpg: Good signature from \"Garrick Aden-Buie <garrick@adenbuie.com>\" [ultimate]\nAuthor: Garrick Aden-Buie <garrick@adenbuie.com>\nDate:   Mon Sep 13 09:34:59 2021 -0400\n\n    test signed commits\n```\n\n### Install a pinentry app\n\nRemember that console dialog that appeared when we committed our test commit above?\nYes, it's fun and retro,\nbut it isn't going to work inside RStudio\nwhen the IDE runs `git` commands for you to commit your files.\n\nIn this step, we'll install `pinentry-mac`,\na modern method for providing a passphrase for your key,\nthat also integrates with MacOS's Keychain\nso you don't have to enter the passphrase with every commit.\n\nIf you're using Windows, you might want to check out the [Gpg4win app](https://www.gpg4win.org/).\nOn Linux,\nyou may want to use [pinentry-gnome3](http://manpages.ubuntu.com/manpages/bionic/man1/pinentry-gnome3.1.html).\nFinally,\nyou could also [configure `gpg-agent` to cache your passphrase](#gpg-agent-cache-passphrase)\nif none of the above options work for you.\n\nInstalling `pinentry-mac` is easy with `brew`:\n\n```bash\nbrew install pinentry-mac\n```\n\nThen we need to configure `gpg` to use `pinentry-mac` for its passphrase needs.\nAdd the line below to `~/.gnupg/gpg-agent.conf`:\n\n```bash\n# vim ~/.gnupg/gpg-agent.conf\npinentry-program /usr/local/bin/pinentry-mac\n```\n\nOr you can create the file and add the line in one command:\n\n```bash\necho \"pinentry-program /usr/local/bin/pinentry-mac\" >> ~/.gnupg/gpg-agent.conf\n```\n\nFinally, restart the `gpg-agent` so that `pinentry-mac` is used for passphrase entry.\n\n```bash\ngpgconf --kill gpg-agent\n```\n\nWhen you create your next commit in RStudio,\nyou'll be prompted with a dialog box to enter your passphrase.\nIf you select the _Save in Keychain_ option,\nyou won't be prompted again;\n`gpg` and `git` will use the passphrase in your Keychain\nto sign your commit with the GPG key you created with Keybase!\n\n![The `pinentry-mac` dialog window asking for the GPG key passphrase when signing a commit for the first time.](rstudio-pinentry-mac.png)\n\n### Import your GPG key on another computer\n\nIf you'd like to use the same GPG key on another computer,\nfirst make sure that you have [Keybase and gpg installed](#install-keybase-and-gpg).\nThen you can export the existing key\n(both its public and secret versions)\nfrom Keybase into `gpg`:\n\n```bash\nkeybase pgp export -q B606B038A1A5CE20 | gpg --import\nkeybase pgp export -q B606B038A1A5CE20 --secret | gpg --allow-secret-key-import --import\n```\n\nAgain, you'll want to tell `gpg` to [trust this key ultimately](#trust-your-own-key-ultimately).\n\n```bash\ngpg --edit-key B606B038A1A5CE20\ngpg> trust\n# pick \"5 = I trust ultimately\"\ngpg> save\n```\n\n## Links and Resources\n\nHere's a short list of links that were helpful to me while figuring out this process.\nHopefully, everything above _just works_ for you,\nbut if not then maybe the posts below will help you out:\n\n- [pstadler/keybase-gpg-github: Step-by-step guide on how to create a GPG key on keybase.io, adding it to a local GPG setup and use it with Git and GitHub.](https://github.com/pstadler/keybase-gpg-github)\n\n- [Sign Git Commits With A Keybase GPG Key – Stephen's Thoughts](https://stephenreescarter.net/signing-git-commits-with-a-keybase-gpg-key/)\n\n- [Sign commits with a GPG key using a passphrase with pinentry-mac | By Parker](https://byparker.com/blog/2021/gpg-pinentry-mac-git/)\n\n- [gnupg2: gpg: public key decryption failed: Inappropriate ioctl for device · Issue #14737 · Homebrew/homebrew-core](https://github.com/Homebrew/homebrew-core/issues/14737)\n\n- [Support signing of git commits · Issue #1865 · rstudio/rstudio](https://github.com/rstudio/rstudio/issues/1865)\n\n## Appendix\n\n### Use `gpg-agent` to cache your passphrase without a pinentry GUI {#gpg-agent-cache-passphrase}\n\nIf you don't want to or can't [install a pinentry app](#install-a-pinentry-app),\nyou can get `gpg-agent` to cache your passphrase for a fixed period of time,\nsay 8 hours.\n\nWhen you start your day —\nor when the cache expires —\nyou'll need to sign something or commit once from the command line\nto re-enter your passphrase.\n\nThe first step is to configure `gpg-agent`\nto remember your key's password for the day (8 hours or 28,800 seconds).\n\n ```bash\n # ~/.gnupg/gpg-agent.conf\n default-cache-ttl 28800\n max-cache-ttl 28800\n ```\n\n You'll need to restart `gpg-agent` so that it picks up the new configuration.\n\n ```bash\n gpgconf --kill gpg-agent\n ```\n\n At this point,\n any `git commit` will automatically be signed using your default key.\n The first commit of the day\n will require you to enter your password,\n which does mean that\n the RStudio Git UI won't be able to sign the first commit\n until you've asked `gpg` to sign something for you.\n\n To get around this,\n you can unlock your gpg key by signing _anything_\n at the start of your work day\n or whenever the 8 hour time limit runs out.\n\n ```bash\n echo \"open sesame\" | gpg -s > /dev/null\n # prompt for password\n ```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}