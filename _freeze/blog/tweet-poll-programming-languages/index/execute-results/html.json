{
  "hash": "e1a31cd7fc9d8d9f3fc5fef7da302b67",
  "result": {
    "markdown": "---\ntitle: Twitter's Feelings About Programming Languages\nauthor: Garrick Aden-Buie\ndate: '2019-10-08'\nslug: tweet-poll-programming-languages\ncategories:\n  - R\n  - rtweet\n  - Data Analysis\n  - Visualization\n  - Programming\ndescription: A deep dive into an informal, free-form survey about experiences with programming languages.\nimage: index_files/figure-html/votes-love-hate-twitter-1.png\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2019/2019-10-08-tweet-poll-programming-languages.Rmarkdown'\nkeywords:\n  - rstats\n  - rtweet\n  - Tweet analysis\n  - Programming languages\n  - R\neditor_options:\n  chunk_output_type: console\nresources:\n  - tweets-first-lang.csv\n---\n\n\n<!-- Links -->\n[first-tweet]: https://twitter.com/cotufa82/status/1179601883448655874\n[cotufa82]: https://twitter.com/cotufa82/\n[edsu-tweet]: https://twitter.com/edsu/status/1180844062552858624\n[edsu-nb]: https://github.com/edsu/notebooks/blob/c5aad3555adfbf7c63dcd968f7b4a73ce11820b5/Languages.ipynb\n[rtweet]: https://rtweet.info\n[mikewk]: https://mikewk.com/\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='index_cache/html/load-tweets_4f9192423504357bcdebc68965e34732'}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell hash='index_cache/html/tweets-lang-poll_434ddbbe56e518814987070ebb7b4f4a'}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n<!----------- POST START ----------->\n\nAn informal poll about experiences with programming languages has been making the rounds on Twitter this week.\nIt all started with [this tweet][first-tweet] from [&commat;cotufa82][cotufa82]:\n\n<blockquote class=\"twitter-tweet\" data-twitter-extracted-i163061341656489096=\"true\"><p dir=\"ltr\" lang=\"en\">1. First language: Basic / Java<br>2. Had difficulties: Java<br>3. Most used: JavaScript / Python<br>4. Totally hate: Java<br>5. Most loved: Go / Python<br>6. For beginners: Python / Ruby<br><br>What about you?</p>â€” Super Di (&commat;cotufa82) <a href=\"https://twitter.com/cotufa82/status/1179601883448655874?ref_src=twsrc%5Etfw\">October 3, 2019</a></blockquote>\n\nThe tweet caught on within a few days\nand there are now more than\n16,840\nreplies and quote tweets from developers and programmers\nsharing their own experiences.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/tweets-per-day-1.svg){width=864}\n:::\n:::\n\n\nMy interest in the poll was piqued by another tweet by\n[&commat;edsu][edsu-tweet]\nsharing a\n[Jupyter notebook][edsu-nb]\nanalyzing the tweeted responses.\nI thought it would be interesting\nto do a similar analysis using R,\ninitially thinking I could compare the R and Python versions.\n\nWhat I should have done is to have used *both* R and Python\n(because they're friends and language wars are silly),\nbut instead I ended up going down the endless rabbit hole\nof regular expressions and free-form informal survey results.\n\n## Gather the Tweets\n\nI gathered all tweets containing `\"first language\"`, `\"most used\"`, and `\"most loved\"`\nusing the excellent [rtweet] package by [Mike Kearney][mikewk].\n\n```r\ntweets <- rtweet::search_tweets(\n  '\"first language\" AND \"most used\" AND \"most loved\"',\n  n = 18000,\n  include_rts = FALSE\n)\n```\n\nYou can download [a CSV with the processed tweets](tweets-first-lang.csv).\nThe `.csv` doesn't include the full tweet data,\nbut it does include `status_id` so that you can recover the tweet data\nwith `rtweet::lookup_statuses()`.\n\n## Whose Tweets Were The Most Popular?\n\n\n::: {.cell}\n\n:::\n\n\nThere were\n16,840\nresponses to the poll and\n89%\nor\n15,025\nof them are\nreplies to or quotes of another tweet.\nHere are the top contributors to the popularity of the poll,\nin the form of the top 10 recipients of a reply or quote tweet.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<script type=\"application/json\" id=\"screen-names\">[{\"status_id\":\"1179601883448655874\",\"screen_name\":\"cotufa82\"},{\"status_id\":\"1180073494047969280\",\"screen_name\":\"nixcraft\"},{\"status_id\":\"1180147893350612993\",\"screen_name\":\"ASpittel\"},{\"status_id\":\"1180173845749125121\",\"screen_name\":\"ryanflorence\"},{\"status_id\":\"1180074716440223744\",\"screen_name\":\"Sosowski\"},{\"status_id\":\"1180169402127249408\",\"screen_name\":\"malwareunicorn\"},{\"status_id\":\"1180151225435742208\",\"screen_name\":\"_developit\"},{\"status_id\":\"1180176367322722304\",\"screen_name\":\"rakyll\"},{\"status_id\":\"1180081960519114757\",\"screen_name\":\"asemota\"},{\"status_id\":\"1180238736698687488\",\"screen_name\":\"JackRhysider\"}]</script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<div id=\"starter-tweet-container\">\n<div id=\"plot\">\n<div class=\"plotly html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-d5e28361da9c64f6e1cf\" style=\"width:100%;height:500px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d5e28361da9c64f6e1cf\">{\"x\":{\"data\":[{\"x\":[0,78],\"y\":[1,1],\"text\":\"   78 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(157,220,165,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(JackRhysider,1)\",\"legendgroup\":\"(JackRhysider,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,79],\"y\":[2,2],\"text\":\"   79 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(127,208,163,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(asemota,1)\",\"legendgroup\":\"(asemota,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,80],\"y\":[3,3],\"text\":\"   80 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(105,195,163,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(rakyll,1)\",\"legendgroup\":\"(rakyll,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,85],\"y\":[4,4],\"text\":\"   85 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(89,180,163,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(_developit,1)\",\"legendgroup\":\"(_developit,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,88],\"y\":[5,5],\"text\":\"   88 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(80,164,162,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(malwareunicorn,1)\",\"legendgroup\":\"(malwareunicorn,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,122],\"y\":[6,6],\"text\":\"  122 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(74,149,159,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(Sosowski,1)\",\"legendgroup\":\"(Sosowski,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,138],\"y\":[7,7],\"text\":\"  138 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(69,134,156,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(ryanflorence,1)\",\"legendgroup\":\"(ryanflorence,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,156],\"y\":[8,8],\"text\":\"  156 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(65,119,152,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(ASpittel,1)\",\"legendgroup\":\"(ASpittel,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,539],\"y\":[9,9],\"text\":\"  539 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(62,104,149,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(nixcraft,1)\",\"legendgroup\":\"(nixcraft,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0,2045],\"y\":[10,10],\"text\":\"2,045 quotes and replies\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":3.77952755905512,\"color\":\"rgba(62,88,144,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(cotufa82,1)\",\"legendgroup\":\"(cotufa82,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[78],\"y\":[1],\"text\":\"   78 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(157,220,165,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(157,220,165,1)\"}},\"hoveron\":\"points\",\"name\":\"(JackRhysider,1)\",\"legendgroup\":\"(JackRhysider,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[79],\"y\":[2],\"text\":\"   79 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(127,208,163,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(127,208,163,1)\"}},\"hoveron\":\"points\",\"name\":\"(asemota,1)\",\"legendgroup\":\"(asemota,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[80],\"y\":[3],\"text\":\"   80 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(105,195,163,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(105,195,163,1)\"}},\"hoveron\":\"points\",\"name\":\"(rakyll,1)\",\"legendgroup\":\"(rakyll,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[85],\"y\":[4],\"text\":\"   85 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(89,180,163,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(89,180,163,1)\"}},\"hoveron\":\"points\",\"name\":\"(_developit,1)\",\"legendgroup\":\"(_developit,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[88],\"y\":[5],\"text\":\"   88 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(80,164,162,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(80,164,162,1)\"}},\"hoveron\":\"points\",\"name\":\"(malwareunicorn,1)\",\"legendgroup\":\"(malwareunicorn,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[122],\"y\":[6],\"text\":\"  122 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(74,149,159,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(74,149,159,1)\"}},\"hoveron\":\"points\",\"name\":\"(Sosowski,1)\",\"legendgroup\":\"(Sosowski,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[138],\"y\":[7],\"text\":\"  138 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(69,134,156,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(69,134,156,1)\"}},\"hoveron\":\"points\",\"name\":\"(ryanflorence,1)\",\"legendgroup\":\"(ryanflorence,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[156],\"y\":[8],\"text\":\"  156 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(65,119,152,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(65,119,152,1)\"}},\"hoveron\":\"points\",\"name\":\"(ASpittel,1)\",\"legendgroup\":\"(ASpittel,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[539],\"y\":[9],\"text\":\"  539 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(62,104,149,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(62,104,149,1)\"}},\"hoveron\":\"points\",\"name\":\"(nixcraft,1)\",\"legendgroup\":\"(nixcraft,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[2045],\"y\":[10],\"text\":\"2,045 quotes and replies\",\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(62,88,144,1)\",\"opacity\":1,\"size\":11.3385826771654,\"symbol\":\"circle\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(62,88,144,1)\"}},\"hoveron\":\"points\",\"name\":\"(cotufa82,1)\",\"legendgroup\":\"(cotufa82,1)\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.958904109589,\"r\":7.30593607305936,\"b\":40.9132420091324,\"l\":92.7853881278539},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-102.25,2147.25],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"500\",\"1000\",\"1500\",\"2000\"],\"tickvals\":[0,500,1000,1500,2000],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"500\",\"1000\",\"1500\",\"2000\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.65296803652968,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Quotes and Replies\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.4,10.6],\"tickmode\":\"array\",\"ticktext\":[\"JackRhysider\",\"asemota\",\"rakyll\",\"_developit\",\"malwareunicorn\",\"Sosowski\",\"ryanflorence\",\"ASpittel\",\"nixcraft\",\"cotufa82\"],\"tickvals\":[1,2,3,4,5,6,7,8,9,10],\"categoryorder\":\"array\",\"categoryarray\":[\"JackRhysider\",\"asemota\",\"rakyll\",\"_developit\",\"malwareunicorn\",\"Sosowski\",\"ryanflorence\",\"ASpittel\",\"nixcraft\",\"cotufa82\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.65296803652968,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.689497716895},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"title\":{\"text\":\"\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187}}},\"hovermode\":\"closest\",\"barmode\":\"relative\",\"dragmode\":false},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1208e6e4c2a3d\":{\"x\":{},\"y\":{},\"colour\":{},\"text\":{},\"yend\":{},\"xend\":{},\"type\":\"scatter\"},\"1208e4a69435d\":{\"x\":{},\"y\":{},\"colour\":{},\"text\":{}}},\"cur_data\":\"1208e6e4c2a3d\",\"visdat\":{\"1208e6e4c2a3d\":[\"function (y) \",\"x\"],\"1208e4a69435d\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"\\nfunction (el) {\\n  const screenNames = JSON.parse(document.getElementById('screen-names').innerHTML)\\n  el.on('plotly_click', function(d) {\\n    const hoveredIdx = d.points[0].y\\n    const tweet = screenNames[screenNames.length - hoveredIdx]\\n    const tweetDiv = document.getElementById('tweet')\\n    tweetDiv.innerHTML = ''\\n    twttr.widgets.createTweet(tweet.status_id, tweetDiv)\\n  })\\n}\\n    \",\"data\":null}]}}</script>\n</div>\n<div id=\"tweet\">\n<div class=\"tweet-placeholder\">\n<div>Click on dot in plot to view tweet...</div>\n</div>\n</div>\n</div>\n```\n:::\n:::\n\n\n\n## Our Experience with Programming Languages\n\nLet's dive into the results.\nIf you're interested in taking a peek behind the regular expressions curtain, I've included a [code walkthrough](#code-walkthrough) below.\n\nThe original tweet asked for six categories: **First language**, **Had difficulties**, **Most used**, **Totally hate**, **Most loved**, **For beginners**.\nReplies to this tweet were... creative.\nThe category names and formatting were hand-typed, so flexible and prone to spelling errors and permutations.\n\nTo get the broadest range of answers possible,\nI used flexible regular expressions to accept a variety of formatting choices,\nand I also widened the categories to encompass the same core themes.\nFor example,\n`first love`, `secret love`, and `mostly loved`\nall were added to the **Most loved** category,\nwhich I called, simply, **love**.\n\nI also captured multiple programming languages in each category\n(even the [original tweet][first-tweet] had multiple answers for first language (Basic/Java) and a few other categories).\n\nEach of the following plots shows the top 20 responses in each category.\n\n\n::: {.cell}\n\n:::\n\n\n### First Language vs. Recommended First Language\n\nHow do the first languages learned by programmers\ncompare to the languages _they_ would recommend to _others_\nto learn first?\nMany people started with older languages\nlike Basic, C, Pascal, C++ and Java\nbut would recommend new programmers start with Python, JavaScript, Ruby and also C or Java.\n\n`<div class=\"fig-wide\">\n<img src=\"index_files/figure-html/votes-first-beginner-wide-1.svg\"/>\n</div>\n<div class=\"fig-narrow\">\n<img src=\"index_files/figure-html/votes-first-beginner-narrow-1.svg\"/>\n</div>`{=html}\n\n### Love It or Hate It\n\nWhich programming languages are loved and which languages are not?\nThe world seems to have a love/hate relationship with JavaScript,\nbut Python is much more loved than hated.\nLikewise Swift, Ruby, and Go are significantly more positive than negative,\nC++ is also a bit love/hate,\nand PHP certainly isn't feeling the love.\n\n`<div class=\"fig-wide\">\n<img src=\"index_files/figure-html/votes-love-hate-wide-1.svg\"/>\n</div>\n<div class=\"fig-narrow\">\n<img src=\"index_files/figure-html/votes-love-hate-narrow-1.svg\"/>\n</div>`{=html}\n\n### Most Used or Had Difficulties\n\nWhich languages are most used compared with those that have caused difficulties?\nJavaScript is eating the world,\nand plenty of people are using workhorse languages like Python, Java and C#/C++.\n(And a quite a few are using PHP presumably because they have to.)\nStill, JavaScript's love/hate relationship continues\nas many people indicated that it caused them problems.\nI'm not surprised to see C++, C, and Java on the _had difficulties_ list.\nInterestingly, Haskell shows up in the _loved_ list but seems to also be tricky to learn.\n\n`<div class=\"fig-wide\">\n<img src=\"index_files/figure-html/votes-used-difficult-wide-1.svg\"/>\n</div>\n<div class=\"fig-narrow\">\n<img src=\"index_files/figure-html/votes-used-difficult-narrow-1.svg\"/>\n</div>`{=html}\n\n### Feelings about `#rstats` {#rstats}\n\n\n::: {.cell}\n\n:::\n\n\nHow do developers feel about my favorite language?\nR isn't a typical first language,\nbut it is among the top 20 recommended to new programmers to learn first.\nIt's also the\n12th\nmost used language.\n\n\n::: {.cell}\n::: {.cell-output-display}\n|Category                                                                                               |Rank |Total |\n|:------------------------------------------------------------------------------------------------------|:----|:-----|\n|most used                                                                                              |12   |1456  |\n|love                                                                                                   |15   |2067  |\n|had difficulties                                                                                       |19   |2092  |\n|hate                                                                                                   |16   |2641  |\n|beginner                                                                                               |17   |2296  |\n|first language                                                                                         |28   |1508  |\n|curious                                                                                                |15   |207   |\n|currently                                                                                              |2    |63    |\n|next                                                                                                   |3    |50    |\n|honerable mention                                                                                      |8    |98    |\n|chronology                                                                                             |25   |29    |\n|also used, eager to learn, frenemy, never studied, on my list, to learn, totally meh, willing to learn |     |      |\n:::\n:::\n\n\n## Code Walkthrough\n\nAt a high level,\nthe process for cleaning and standardizing the tweet repsonses\nlooks like this.\nI abstracted some of the larger steps in [the pipeline](#tweets-lang-poll) into separate functions.\n\n1. Pre-clean the tweet text, including [remove_unused_text()](#remove-unused-text)\n\n1. Separate tweets so that each line or item of the tweet is in its own row using `tidyr::separate_rows()`\n   - Items are indicated by `N.`, `N)`, `N:`, or `N-`, or just appear on a new line without numbering.\n\n1. Remove whitespace and any numbering from each line\n\n1. Separate each line into a question `category` and `answer` pair by splitting on `:` using `tidyr::separate()`\n\n1. Filter out empty answers and convert everything to lower case\n\n1. Use a set of regular expressions to [process_answer()](#process-answer) into individual languages\n\n1. Use more regular expressions to [recode_answer()](#recode-answer) and [recode_category()](#recode-category), fixing spelling mistakes and combining overlapping groups\n\n1. Count the number of replies mentioning each programming language by category\n\nThe [whole pipeline](#tweets-lang-poll) is summarized below,\nincluding the function to [plot response counts by category](#plot-tweets-by-category).\n\n### Remove Unused Text\n\nThis little function removes usernames (`@user`),\nURLs,\nparenthetical comments,\nand turns `#hashtag` into `hashtag`\nbecause many people specified their choices using language hashtags, like `#rstats` instead of `r`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove_unused_text <- function(text) {\n  text %>%\n    # strip usernames\n    str_remove_all(\"@\\\\w+\\\\s*\") %>%\n    # strip URLs\n    str_remove_all(\"\\\\s*http[^ ]+\\\\s*\") %>%\n    # remove parentheticals\n    str_remove_all(\"\\\\s*\\\\(.+?\\\\)( |\\n|$)\") %>%\n    # replace \"#hashtag\" with \"hashtag\"\n    str_replace_all(\"#(\\\\w)\", \"\\\\1\")\n}\n```\n:::\n\n\n### Process Answer\n\nThe goal in processing the answers is to transform each answer to a single string of comma separated languages.\nIn doing this, common variations of language lists should result in the same final answers.\nFor example,\n`Python and R`, `Python/R`, and `Python or R` should all be handled similarly.\nTo help with this process I created a list of common languages that frequently appear in the answers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommon_langs <- c(\n  # c, c#, c++, and .net are manually included later\n  \"css\", \"html\", \"python\", \"javascript\", \"x86\", \"java\", \"ruby\", \"pascal\", \"php\",\n  \"matlab\", \"perl\", \"fortran\", \"logo\", \"actionscript\", \"lua\", \"assembly\",\n  \"delphi\", \"js\", \"scheme\", \"scratch\", \"go\", \"typescript\", \"clojure\", \"elixr\",\n  \"kotlin\", \"ocaml\", \"rust\", \"mathematica\", \"matlab\", \"dart\", \"flutter\", \"groovy\",\n  \"flash\", \"bash\", \"shell\", \"sql\", \"haskell\", \"lisp\", \"scala\", \"sas\",\n  \"rstats\", \"golang\"\n)\n```\n:::\n\n\nThen, with a bit of regex kung fu,\nthe responses are converted from `Python and R` to `python,r`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprocess_answer <- function(answer, common_langs) {\n  answer %>%\n    # Aggresively remove unusual characters\n    str_replace_all(\"[^\\\\w\\\\d#+., ]\", \" \") %>%\n    # Remove leading character if it's a `,`\n    str_replace_all(\"^,\", \" \") %>%\n    # Remove `.` at end of string\n    str_remove_all(\"[.]$\") %>%\n    # Replace and, or with space (prep for next step)\n    str_replace_all(\"\\\\b(and|or|also|amp)\\\\b\", \" \") %>%\n    # Remove qualifiers\n    str_remove_all(\"\\\\b(maybe|now)\\\\b\") %>%\n    # Multiple languages may be listed separated by spaces, if so add comma\n    str_replace_all(\n      pattern = paste0(\"\\\\b(\", paste(common_langs, collapse = \"|\"), \")\\\\b\\\\s*\"),\n      replacement = \"\\\\1,\"\n    ) %>%\n    gsub(\"c\\\\+\\\\+\\\\d+\", \"c++\", .) %>%\n    # Comma separate languages that are tough to regex\n    gsub(\"c \", \"c,\", ., fixed = TRUE) %>%\n    gsub(\".net \", \".net,\", ., fixed = TRUE) %>%\n    gsub(\"c# \", \"c#,\", ., fixed = TRUE) %>%\n    gsub(\"c++ \", \"c++,\", ., fixed = TRUE) %>%\n    # No trailing punctuation\n    str_remove(\"[.,!?/=<>;:]+$\")\n}\n```\n:::\n\n\n### Recode Answer\n\nThere are a number of programming languages that have multiple variants\nor are commonly referred to by shorthand names â€”\n`rstats` for `R` or `golang` for `go`, for example.\nThis function recodes the programming language answers\nthat I noticed while working with the data\n(but it's admitedly not complete).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecode_answer <- function(answer) {\n  # Recode Basic Variants\n  answer <- recode(answer, \"vb\" = \"visual basic\")\n  answer <- if_else(str_detect(answer, \"visual.*basic\"), \"visual basic\", answer)\n  answer <- if_else(str_detect(answer, \"q.*basic\"), \"qbasic\", answer)\n  answer <- if_else(str_detect(answer, \"gw.*basic\"), \"gw basic\", answer)\n  answer <- if_else(str_detect(answer, \"(?<!(visual|q|gw)\\\\s?)basic\"), \"basic\", answer)\n  # Recode Pascal variants\n  answer <- if_else(str_detect(answer, \"pascal\"), \"pascal\", answer)\n  # Recode js vs Javascript\n  answer <- recode(answer, \"js\" = \"javascript\")\n  # Recode golang to go\n  answer <- recode(answer, \"golang\" = \"go\")\n  # Recode rstats as r\n  recode(answer, \"rstats\" = \"r\")\n}\n```\n:::\n\n\n### Recode Category\n\nAs you might imagine with a free-form survey\nwhere users manually enter both the question _and_ the answer,\nthere is a large amount of variation in the spelling and categories used.\n\nI broadly grouped many of the variations into common themes,\nprimarily working to fit the original prompt.\nThere are many, many interesting created categories, like `best dead language`, `didn't spark joy`, or `latest crush`.\nHere are two additional categories that I created, `curious` and `interesting`.\n\n`<div class=\"fig-wide\">\n<img src=\"index_files/figure-html/votes-curious-interesting-wide-1.svg\"/>\n</div>\n<div class=\"fig-narrow\">\n<img src=\"index_files/figure-html/votes-curious-interesting-narrow-1.svg\"/>\n</div>`{=html}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecode_category <- function(category) {\n  case_when(\n    str_detect(category, \"first.+lang(uage)?|firstlanguage\") ~ \"first language\",\n    str_detect(category, \"^first$\") ~ \"first language\",\n    str_detect(category, \"b(e|i)ginn?e|new dev|newb|starter|noob|brginners|begginners|begginers\") ~ \"beginner\",\n    str_detect(category, \"want|would|wish|wanna|curious|desire|(like.+learn)|curios|(like to try)\") ~ \"curious\",\n    str_detect(category, \"m[ou]st?(ly)? ?used?\") ~ \"most used\",\n    str_detect(category, \"diff?.+c.+lt|diificulties|difficulies|difficuties|difficulities\") ~ \"had difficulties\",\n    str_detect(category, \"love\") ~ \"love\",\n    str_detect(category, \"hate|dislike|avoid|(don.?t.+like)\") ~ \"hate\",\n    str_detect(category, \"promis|interest|exotic|esoter|(most excited)|(weird)\") ~ \"interesting\",\n    str_detect(category, \"honou?rable mention\") ~ \"honerable mention\",\n    str_detect(category, \"next|need to learn\") ~ \"next\",\n    str_detect(category, \"others used|other lang|dabbl\") ~ \"others used\",\n    str_detect(category, \"current\") ~ \"currently\",\n    TRUE ~ category\n  )\n}\n```\n:::\n\n\n### Poll Processing Pipeline {#tweets-lang-poll}\n\nFinally, here is the full pipeline to go from raw tweets to poll results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets_lang_poll <-\n  tweets %>%\n  select(status_id, created_at, user_id, screen_name, text) %>%\n  # Remove tweets with \"English\" because that's probably a different thread\n  filter(!str_detect(text, \"[eE]nglish\")) %>%\n  mutate(\n    # Backup original tweet text\n    text_og = text,\n    # Remove unused text from tweets\n    text = remove_unused_text(text)\n  ) %>%\n  # Split text into question/answer pairs,\n  # splitting on newline or one of: `N.`, `N)`, `N:`, or `N-`\n  separate_rows(text, sep = \"\\n|\\\\d\\\\s*[.):-]\") %>%\n  # Remove whitespace and `N.` numbers from start of text\n  mutate(text = str_remove_all(text, \"^\\\\s*(\\\\d[.):-])?\\\\s*\")) %>%\n  # Seperate question/answer into category, answer columns, splitting on colon `:`\n  separate(\n    col = text,\n    into = c(\"category\", \"answer\"),\n    sep = \"\\\\s*:\\\\s*\",\n    remove = FALSE\n  ) %>%\n  # Remove nothing answers or answers without any letters\n  filter(\n    !is.na(answer),\n    str_detect(answer, \"[[:alnum:]]\")\n  ) %>%\n  # Re-encode category, answer as UTF-8 (:shrug:) and lowercase\n  mutate_at(vars(category, answer), stringi::stri_enc_toutf8) %>%\n  mutate_at(vars(category, answer), tolower) %>%\n  # Category: Remove leading non-alpha characters and squish whitespace\n  mutate(\n    category = str_remove(category, \"^[^[:alpha:]]+\"),\n    category = str_squish(category)\n  ) %>%\n  # Process answer as well as we can programmatically\n  mutate(answer = process_answer(answer, common_langs)) %>%\n  # Separate into one language per row\n  separate_rows(answer, sep = \"\\\\s*[,/]\\\\s*\") %>%\n  # Squish the strings\n  mutate_at(vars(answer), str_squish) %>%\n  mutate(\n    answer = recode_answer(answer),\n    category2 = recode_category(category)\n  ) %>%\n  # Filter out empty category, answer fields\n  filter(!str_detect(answer, \"^\\\\s*$\")) %>%\n  filter(\n    nchar(answer) > 0,\n    nchar(category) > 4\n  )\n```\n:::\n\n\nAnd then to aggregate and count programming language mentions per category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets_lang_counted <-\n  tweets_lang_poll %>%\n  count(category2, answer, sort = TRUE)\n```\n:::\n\n\n### Plot Language Counts by Category {#plot-tweets-by-category}\n\nLast, but not least,\nthis function creates the plots for requested categories.\nOne key detail is that bars are ordered within each facet\nusing <span class=\"pkg\">tidytext</span>'s `reorder_within()` function.\nCheck out Julia Silge's excellent blog post on this function:\n[Reordering and facetting for ggplot2](https://juliasilge.com/blog/reorder-within/).\n\nWhile the bars are ordered in descending order,\nI wanted the bar fill color to be consistent across facets\nto facilitate comparison between the two categories.\nThe color palette is `ocean.deep` from the <span class=\"pkg\">pals</span> package, which I found by looking through\nEmil Hvitfeldt's\n[Comprehensive list of color palettes in R](https://github.com/EmilHvitfeldt/r-color-palettes#comprehensive-list-of-color-palettes-in-r).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_tweets_by_category <- function(\n  tweets_lang_counted,\n  categories,\n  ncol = 2,\n  min_count = 10\n) {\n  tweets_lang_counted %>%\n    filter(category2 %in% categories) %>%\n    mutate_at(vars(category2), factor, levels = categories) %>%\n    group_by(category2) %>%\n    arrange(desc(n)) %>%\n    filter(n >= min_count) %>%\n    top_n(20, n) %>%\n    ungroup() %>%\n    arrange(category2, answer, desc(n)) %>%\n    mutate(\n      answer_within = tidytext::reorder_within(answer, n, category2),\n      answer = fct_reorder(answer, n, first)\n    ) %>%\n    ggplot() +\n    aes(answer_within, n, fill = answer) +\n    geom_col() +\n    coord_flip() +\n    tidytext::scale_x_reordered(expand = c(0, 0)) +\n    discrete_scale(\"fill\", \"ocean\", function(n) rev(pals::ocean.deep(n + 10))[6:(n+5)]) +\n    guides(fill = FALSE) +\n    labs(x = NULL, y = NULL) +\n    facet_wrap(~ category2, scales = \"free\", ncol = ncol) +\n    theme_minimal(base_family = \"PT Sans\", base_size = 18) +\n    theme(\n      plot.margin = margin(20, 20, 20, 20),\n      panel.grid.major.y = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      axis.ticks.y = element_blank(),\n      axis.text.x = element_text(family = \"PT Sans Narrow\"),\n      axis.text.y.left = element_text(margin = margin()),\n      panel.spacing.x = unit(3, \"line\"),\n      panel.spacing.y = unit(2, \"line\")\n    )\n}\n```\n:::\n\n\n## What About You?\n\nIf you made it this far,\nshare your programming experiences on Twitter!\n\nThanks for reading and feel free to share\nfeedback, thoughts, or questions with me on Twitter at\n[&commat;grrrck](https://twitter.com/grrrck).\n\n\n::: {.cell}\n<style type=\"text/css\">\n#starter-tweet-container {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 300px;\n\twidth: 100%;\n\tmax-width: 100%;\n\tmin-height: 540px;\n}\n#plot {\n  max-width: 90vw;\n}\n#tweet > * {\n  margin: 0 auto;\n}\n.tweet-placeholder {\n\tbackground: #F8F8F8;\n  height: calc(525px - 4em);\n  width: 100%;\n\tmargin: 2em;\n\tpadding: 2em;\n\tborder-radius: 10px;\n\ttext-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n@media screen and (min-width: 601px) {\n  .fig-wide {\n    display: block;\n  }\n  .fig-narrow {\n    display: none;\n  }\n}\n@media screen and (max-width: 600px) {\n  .fig-wide {\n    display: none;\n  }\n  .fig-narrow {\n    display: block;\n  }\n  #starter-tweet-container {\n    grid-template-columns: 1fr;\n    grid-template-rows: 540px 1fr;\n    width: 100%;\n    max-width: 100%;\n  }\n  #tweet {\n    min-height: 200px;\n  }\n  .tweet-placeholder {\n    height: 175px;\n  }\n}\n@media screen and (max-width: 65em) and (min-width: 48em) {\n  #starter-tweet-container {\n    grid-template-columns: 1fr;\n    grid-template-rows: 540px 1fr;\n    width: 100%;\n  }\n  .container.expanded #starter-tweet-container {\n    max-width: 100vw;\n  }\n  .container:not(.expanded) #starter-tweet-container {\n    max-width: calc(100vw - 288px);\n  }\n  #tweet {\n    min-height: 500px;\n  }\n}\n</style>\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.1/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}