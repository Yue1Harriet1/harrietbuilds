{
  "hash": "6d61298eb07b0c217d67e094c503c33c",
  "result": {
    "markdown": "---\ntitle: Printing xaringan slides with chromote\nauthor: Garrick Aden-Buie\ndate: '2021-01-25'\nslug: print-xaringan-chromote\ncategories:\n  - R\n  - xaringan\n  - xaringanExtra\n  - Slides\n  - Tips\n  - Scripts\ndescription: Create PDF versions of complicated xaringan slides using {chromote} and a little magic.\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/tree/main/content/blog/2021/print-xaringan-chromote/index.Rmarkdown'\nkeywords: rstats\neditor_options:\n  chunk_output_type: console\n---\n\n\n<!-- Links -->\n[xaringan]: https://github.com/yihui/xaringan\n[xaringanExtra]: https://pkg.garrickadenbuie.com/xaringanExtra\n[panelsets]: https://pkg.garrickadenbuie.com/xaringanExtra/#/panelset\n[chromote]: https://github.com/rstudio/chromote\n[decktape]: https://github.com/astefanutti/decktape\n[pdftools]: https://docs.ropensci.org/pdftools\n[gist-full]: https://gist.github.com/gadenbuie/f6b8ec0335bdd45ed5a68bead60ef4fa\n\n\n\n\n::: {.cell hash='index_cache/html/gist_0f31a2f7d6601be1369639e2b8ef0cab'}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: lead\n\nThere are a number of options for producing PDF versions of <span class=\"pkg\">[xaringan]</span> slides,\nprovided you use the standard <span class=\"pkg\">xaringan</span> features.\n\nIf you add interactive elements,\nlike [panelsets] from <span class=\"pkg\">[xaringanExtra]</span>,\nprinting your slides to convert them to PDF may not capture everything in your slides.\n\nThis post demonstrates a function that uses <span class=\"pkg\">[chromote]</span>\nto print <span class=\"pkg\">xaringan</span> slides to PDF files that should give better results,\nin particular when using [panelsets].\n\n:::\n\n## The Problem\n\nTypically, it's fairly easy to convert <span class=\"pkg\">xaringan</span> slides to PDF.\nThere are three methods that I've used that each work well\nand produce relatively similar results:\n\n1. Print the slides from a browser. Typically this works best in Chrome.\n\n1. Use `xaringan::decktape()` to virtually print the slides to PDF.\n  This requires docker or an installed version of the [decktape.js][decktape] utility.\n\n1. Use `pagedown::chrome_print()`. This is similar to the first option,\n   but uses a [headless](#headless) version of Chrome to do the printing\n   behind the scenes.\n\nThese methods all work well but have one significant drawback:\nthey don't work well with <span class=\"pkg\">xaringanExtra</span>'s [panelsets].\nThe problem with the panelsets is that they essentially add \"within-slide\" slides.\nAll of the panels are contained in a single slide,\nso when printed,\nonly the first panel in the panelset is shown.\n\n\n## The Idea\n\nThe solution is easy but took me a bit of fiddling to figure out:\nwe use <span class=\"pkg\">chromote</span> to control our own headless version of Chrome.\nThen we ask a programmatic monkey to push the <kbd>&rarr;</kbd> button repeatedly,\nonce per second(-ish),\nto advance through the slides,\nprinting each slide to its own PDF.\n\nOnce all the slides are printed,\nwe ask our monkey assistant to please staple the slides together into one (big) PDF file.\nAll of this happens inside a headless Chrome browser controlled by <span class=\"pkg\">chromote</span>.\n\nThat's it!\nAnd okay, the monkey assistant is actually a little bit of JavaScript that mashes a virtual right arrow key.\nAnd the stapler is actually the fantastic <span class=\"pkg\">[pdftools]</span> package.\n\nOh, and <a id=\"headless\">_headless_</a> isn't as spooky as it sounds.\nBasically it's Chrome without the _chrome_.\nIn other words,\nit's a version of Chrome that runs as a command line utility\nand doesn't have a user interface that you can click around in.\nInstead, you communicate with the browser by sending it commands,\nall of which are made easier by <span class=\"pkg\">chromote</span>.\n\n## The Solution\n\nI've written a function, `xaringan_to_pdf()`,\nthat you can point either at your slides online or your at local rendered slides (which may require `file://` before the full path to the `.html` file).\n\nYou can [copy the code below](#the-code), or you can source it from [this gist][gist-full] using the code and shortlink below[^why-here].\n_Please check the source before you run it!_\n\n[^why-here]: I wasn't really sure where to put this function. Maybe I'll eventually add it to [xaringanExtra</span>, but for now it'll live here where hopefully it can still be useful to you!\n\n```r\nsource(\"https://git.io/xaringan2pdf\")\n```\n\nRunning `xaringan_to_pdf()` will walk through your slides,\nprinting them one-by-one,\nand returning one big PDF file.\nI'm not linking one here because they can be _big_.\n\n<pre id=\"asciicast\"><img src=\"asciicast-xaringan2pdf.svg\"></pre>\n\n## The Code\n\nBefore you can print your slides with `xaringan_to_pdf()`, you'll need a few things:\n\n1. [Google Chrome](https://www.google.com/chrome/)\n\n1. The <span class=\"pkg\">chromote</span> package, which isn't on CRAN yet:\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   remotes::install_github(\"rstudio/chromote\")\n   ```\n   :::\n\n\n1. A few other packages that you can get from CRAN:\n\n\n   ::: {.cell}\n   \n   ```{.r .cell-code}\n   install.packages(c(\"progress\", \"jsonlite\", \"pdftools\", \"digest\"))\n   ```\n   :::\n\n\nOnce you have those things installed and ready to go,\ncopy the source code below and then run `xaringan_to_pdf()` to print your slides!\n\nIf you have any problems with the code,\nfeel free to [leave a comment on the gist][gist-full].\n\n\n::: {.cell}\n<style type=\"text/css\">\n.gist { display: none; }\n#xaringan-chromote-print-r {\n  max-height: 80vh;\n  overflow-y: auto;\n}\n#asciicast > img {\n  margin-bottom: 0;\n}\n</style>\n:::\n\n```{=html}\n<pre class=\"r\"><code id = \"xaringan-chromote-print-r\">#' Print xaringan slides to PDF\n#'\n#' Prints xaringan slides to a PDF file, even complicated slides\n#' with panelsets or other html widgets or advanced features.\n#' Requires a local installation of Chrome.\n#'\n#' @param input Path to Rmd or html file of xaringan slides.\n#' @param output_file The name of the output file. If using NULL then\n#'   the output filename will be based on filename for the input file.\n#'   If a filename is provided, a path to the output file can also be provided.\n#' @param delay Seconds of delay between advancing to and printing\n#'   a new slide.\n#' @param include_partial_slides Should partial (continuation) slides be\n#'   included in the output? If `FALSE`, the default, only the complete slide\n#'   is included in the PDF.\nxaringan_to_pdf <- function(\n  input,\n  output_file = NULL,\n  delay = 1,\n  include_partial_slides = FALSE\n) {\n  if (!requireNamespace(\"chromote\", quietly = TRUE)) {\n    stop(\"`chromote` is required: devtools::install_github('rstudio/chromote')\")\n  }\n  required_packages <- c(\"progress\", \"jsonlite\", \"pdftools\", \"digest\", \"fs\")\n  for (pkg in required_packages) {\n    if (!requireNamespace(pkg, quietly = TRUE)) {\n      stop(\"`\", pkg, \"` is required: install.packages('\", pkg, \"')\")\n    }\n  }\n\n  is_url <- grepl(\"^(ht|f)tp\", tolower(input))\n\n  if (is.null(output_file)) {\n    if (is_url) {\n      output_file <- fs::path_ext_set(fs::path_file(input), \"pdf\")\n    } else {\n      output_file <- fs::path_ext_set(input, \"pdf\")\n    }\n  }\n\n  if (!is_url && !grepl(\"^file://\", input)) {\n    if (!tolower(fs::path_ext(input)) %in% c(\"htm\", \"html\")) {\n      stop(\"`input` must be the HTML version of the slides.\")\n    }\n    input <- paste0(\"file://\", fs::path_abs(input))\n  }\n\n  b <- chromote::ChromoteSession$new()\n  on.exit(b$close(), add = TRUE)\n\n  b$Page$navigate(input, wait_ = TRUE)\n  b$Page$loadEventFired()\n\n  has_remark <- b$Runtime$evaluate(\"typeof slideshow !== 'undefined'\")$result$value\n  if (!has_remark) {\n    stop(\"Input does not appear to be xaringan slides: \", input)\n  }\n\n  current_slide <- function() {\n    x <- b$Runtime$evaluate(\"slideshow.getCurrentSlideIndex()\")$result$value\n    as.integer(x) + 1L\n  }\n\n  slide_is_continuation <- function() {\n    b$Runtime$evaluate(\n      \"document.querySelector('.remark-visible').matches('.has-continuation')\"\n    )$result$value\n  }\n\n  hash_current_slide <- function() {\n    digest::digest(b$Runtime$evaluate(\n      \"document.querySelector('.remark-visible').innerHTML\"\n    )$result$value)\n  }\n\n  get_ratio <- function() {\n    r <- b$Runtime$evaluate('slideshow.getRatio()')$result$value\n    r <- lapply(strsplit(r, \":\"), as.integer)\n    width <- r[[1]][1]\n    height <- r[[1]][2]\n    page_width <- 8/width * width\n    list(\n      width = as.integer(908 * width / height),\n      height = 681L,\n      page = list(width = page_width, height = page_width * height / width)\n    )\n  }\n\n  slide_size <- get_ratio()\n\n  expected_slides <- as.integer(\n    b$Runtime$evaluate(\"slideshow.getSlideCount()\")$result$value\n  )\n\n  max_slides <- expected_slides * 4\n\n  b$Browser$setWindowBounds(1, bounds = list(\n    width = slide_size$width,\n    height = slide_size$height\n  ))\n\n  b$Emulation$setEmulatedMedia(\"print\")\n  b$Runtime$evaluate(paste0(\n    \"let style = document.createElement('style')\\n\",\n    \"style.innerText = '@media print { \",\n    \".remark-slide-container:not(.remark-visible){ display:none; }\",\n    if (include_partial_slides) \" .has-continuation { display: block }\",\n    \"}'\\n\",\n    \"document.head.appendChild(style)\"\n  ))\n\n  pb <- progress::progress_bar$new(\n    format = \"Slide :slide (:part) [:bar] Eta: :eta\",\n    total = expected_slides\n  )\n\n  idx_slide <- current_slide()\n  last_hash <- \"\"\n  idx_part <- 0L\n  pdf_files <- c()\n  for (i in seq_len(max_slides)) {\n    if (i > 1) {\n      b$Input$dispatchKeyEvent(\n        \"rawKeyDown\",\n        windowsVirtualKeyCode = 39,\n        code = \"ArrowRight\",\n        key = \"ArrowRight\",\n        wait_ = TRUE\n      )\n    }\n\n    if (current_slide() == idx_slide) {\n      step <- 0L\n      idx_part <- idx_part + 1L\n    } else {\n      step <- 1L\n      idx_part <- 1L\n    }\n    idx_slide <- current_slide()\n    pb$tick(step, tokens = list(slide = idx_slide, part = idx_part))\n\n    if (!isTRUE(include_partial_slides) && slide_is_continuation()) next\n    Sys.sleep(delay)\n\n    this_hash <- hash_current_slide()\n    if (identical(last_hash, this_hash)) break\n    last_hash <- this_hash\n\n    pdf_file_promise <- b$Page$printToPDF(\n      landscape = TRUE,\n      printBackground = TRUE,\n      paperWidth = 12,\n      paperHeight = 9,\n      marginTop = 0,\n      marginRight = 0,\n      marginBottom = 0,\n      marginLeft = 0,\n      pageRanges = \"1\",\n      preferCSSPageSize = TRUE,\n      wait_ = FALSE\n    )$then(function(value) {\n      filename <- tempfile(fileext = \".pdf\")\n      writeBin(jsonlite::base64_dec(value$data), filename)\n      filename\n    })\n    pdf_files <- c(pdf_files, b$wait_for(pdf_file_promise))\n  }\n\n  pdftools::pdf_combine(pdf_files, output = output_file)\n  fs::file_delete(pdf_files)\n\n  invisible(output_file)\n}</code></pre>\n\n<script\n  type=\"text/javascript\"\n  src=\"https://gist.github.com/f6b8ec0335bdd45ed5a68bead60ef4fa.js?file=xaringan-chromote-print.R\"\n></script>\n```\n\n::: {.cell}\n<script type=\"text/javascript\">\nvar code = []\ndocument.addEventListener('DOMContentLoaded', function() {\n  var gist = document.querySelectorAll('.gist .file .js-file-line')\n  if (gist.length) {\n    gist.forEach(function(el) {\n      code.push(el.textContent)\n    })\n    var rscript = document.getElementById('xaringan-chromote-print-r')\n    rscript.classList = 'r'\n    rscript.textContent = code.join('\\n').replace(/\\n\\n/g, '\\n')\n    hljs.highlightBlock(rscript)\n  }\n})\n</script>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}