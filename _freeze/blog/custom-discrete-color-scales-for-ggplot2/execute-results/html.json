{
  "hash": "8060687cfb4b68fb3e3180fae646b0d2",
  "result": {
    "markdown": "---\ntitle: Custom Discrete Color Scales for ggplot2\nauthor: Garrick Aden-Buie\ndate: '2019-08-15'\nslug: custom-discrete-color-scales-for-ggplot2\ncategories:\n  - Blog\ntags:\n  - R\n  - ggplot2\n  - Visualization\n  - Tips\ndescription: >\n  Building discrete color scales for ggplot2\n  with some cool features for binary categorical variables.\nimages:\n  - /blog/2019/2019-08-15-custom-discrete-color-scales-for-ggplot2_files/figure-html/title-card-1.png\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2019/2019-08-15-custom-discrete-color-scales-for-ggplot2.Rmarkdown'\nkeywords: rstats\neditor_options:\n  chunk_output_type: console\n---\n\n\n<!-- Links -->\n[ggplot2]: https://ggplot2.tidyverse.org\n\n\n\n\n\nThis is a quick post demonstrating a custom discrete color scale for <span class=\"pkg\">[ggplot2]</span>.\nThe goal is to create a branded color scale that we can apply to a ggplot2 plot\nwith `+ scale_color_branded()`.\n\nI'm going to demonstrate how to customize the order of the colors used in the palette\nby showcasing a neat setup for setting the colors of binary variables.\nWhenever two discrete values are used for the color scale,\nthe palette will automatically choose a primary color and a softer secondary\n(or other) color.\nBoth will be parameterized so that we can change the colors as needed,\nchoosing automatically from a branded color palette.\n\n## A color palette for our \"brand\"\n\nSuppose we have color palette for our brand or organization.\nI just grabbed a random color palette from [coolors.co](https://coolors.co/app/2e4057-66a182-edae49-d1495b-00798c)\n(but I think it actually looks okay!).\nWe'll store this in a list called `branded_colors`,\nthat you would ideally export from the package containing your brand's <span class=\"pkg\">ggplot2</span> themes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbranded_colors <- list(\n  \"blue\"   = \"#00798c\",\n  \"red\"    = \"#d1495b\",\n  \"yellow\" = \"#edae49\",\n  \"green\"  = \"#66a182\",\n  \"navy\"   = \"#2e4057\",\n  \"grey\"   = \"#8d96a3\"\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/show-brand-colors-1.png){width=1728}\n:::\n:::\n\n\n## Create a palette function\n\nNext we create the palette function.\nUltimately, what we need from a palette function is\na function that takes a single argument `n` and returns `n` colors.\n\nBut in our case, we want to give the user some control over which colors are used,\nso our palette function needs to have some additional parameters.\nTo balance both needs, we'll use a *closure*,\nwhich is fancy word for a function that returns another function.\nThe outer function sets up the color choices\nand the inner function returns a simple function of `n` that gives <span class=\"pkg\">ggplot2</span>\nour brand's colors.\n\nWhat's great is that we can do whatever we want inside these functions.\nYou can use this opportunity to re-order the colors for specific values of `n`, for example.\n\nWe're going to make specific decisions about the colors used when `n == 2`.\nWe want the palette to return two colors, `branded_colors[primary]` and another color.\nThe `other` argument specifies the name of the second (or other) color,\nand we'll first try to lookup the color name from the brand colors,\nbut we'll also let the user specify a manual color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbranded_pal <- function(\n  primary = \"blue\",\n  other = \"grey\",\n  direction = 1\n) {\n  stopifnot(primary %in% names(branded_colors))\n\n  function(n) {\n    if (n > 6) warning(\"Branded Color Palette only has 6 colors.\")\n\n    if (n == 2) {\n      other <- if (!other %in% names(branded_colors)) {\n        other\n      } else {\n        branded_colors[other]\n      }\n      color_list <- c(other, branded_colors[primary])\n    } else {\n      color_list <- branded_colors[1:n]\n    }\n\n    color_list <- unname(unlist(color_list))\n    if (direction >= 0) color_list else rev(color_list)\n  }\n}\n```\n:::\n\n\nHere are a few examples of the colors\ngiven by the pallete function\nreturned by `branded_pal()`\nfor various values of `n`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbranded_pal()(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#8d96a3\" \"#00798c\"\n```\n:::\n\n```{.r .cell-code}\nbranded_pal(other = \"green\")(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#66a182\" \"#00798c\"\n```\n:::\n\n```{.r .cell-code}\nbranded_pal()(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#00798c\" \"#d1495b\" \"#edae49\"\n```\n:::\n\n```{.r .cell-code}\nbranded_pal(direction = -1)(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#edae49\" \"#d1495b\" \"#00798c\"\n```\n:::\n:::\n\n\n## Create a discrete color scale\n\nNow, we wrap this palette into a `scale_colour_branded()` function,\nusing `ggplot2::discrete_scale()` to turn our palette into a <span class=\"pkg\">ggplot2</span> scale.\nNote that ggplot2 convention is to spell `colour` with a `u`\nand to create an alias to the American spelling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_colour_branded <- function(\n  primary = \"blue\",\n  other = \"grey\",\n  direction = 1,\n  ...\n) {\n  ggplot2::discrete_scale(\n    \"colour\", \"branded\",\n    branded_pal(primary, other, direction),\n    ...\n  )\n}\n\nscale_color_branded <- scale_colour_branded\n```\n:::\n\n\n## Demonstration\n\nLet's see our new discrete color scale in action.\nWe'll create a simple plot using `mtcars` using the binary variable `vs`\n(engine shape, V or straight)\nfor the point colors.\n\nHere's our plot using the standard <span class=\"pkg\">ggplot2</span> colors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Convert vs, gear to character so ggplot2 uses discrete scales\nmtcars$vs   <- paste(mtcars$vs)\nmtcars$gear <- paste(mtcars$gear)\n\ng <- ggplot(mtcars) +\n  aes(mpg, wt, color = vs) +\n  geom_point(size = 3) +\n  theme_bw()\n\ng\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo-1.png){width=768}\n:::\n:::\n\n\nUsing our discrete color scale automatically uses our brand's primary color\nwith the brand's grey color we chose as the default `other` value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + scale_color_branded()\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo2-1.png){width=768}\n:::\n:::\n\n\nThe default value is designed to highlight `TRUE` values and soften `FALSE` values,\nbut you may want complementary colors instead.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + scale_color_branded(other = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo3-1.png){width=768}\n:::\n:::\n\n\nWhen the level ordering doesn't match the colors,\nwe let the user reverse the direction of the palette by setting `direction = -1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + scale_color_branded(other = \"yellow\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo4-1.png){width=768}\n:::\n:::\n\n\nIf you'd rather use a custom color for the `other` color,\nwe've given the user a small amount of leeway to deviate from the brand colors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + scale_color_branded(other = \"#a2d729\")\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo5-1.png){width=768}\n:::\n:::\n\n\nBut when there are more than 2 categorical levels,\nthe brand color palette is used...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + aes(color = gear) + scale_color_branded()\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo6-1.png){width=768}\n:::\n:::\n\n\n...and `primary` and `other` options are ignored...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + aes(color = gear) + scale_color_branded(other = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo7-1.png){width=768}\n:::\n:::\n\n\n...but the `direction` argument is still helpful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + aes(color = gear) + scale_color_branded(direction = -1)\n```\n\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/demo8-1.png){width=768}\n:::\n:::\n\n\n\n## Final thoughts\n\nI used this technique to create a branded <span class=\"pkg\">ggplot2</span> theme\nat work and I've found that\nthis special treatment of binary categorical variables is incredibly helpful.\n\nI frequently need to communicate two values or trends\nin a way that allows for comparisons but clearly highlights one category.\nA common example would be comparing local cancer rates with statewide averages,\nand in these cases having a muted color for the comparison is incredibly helpful.\n\nHere's an example\nusing the Texas housing sales data that ships with <span class=\"pkg\">ggplot2</span>\nto showcase monthly total home sales in Austin\nwith Dallas sale volume shown for reference.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](custom-discrete-color-scales-for-ggplot2_files/figure-html/tx-housing-example-1.png){width=768}\n:::\n:::\n\n\n### Indicate discrete/continuous in the function name\n\nIf you're using this as guidance for building your own discrete color scale,\nmy final tip would be to modify the name of the scale function and\nappend `_d` to the end to indicate that the scale is discrete.\n\n```r\nscale_color_branded_d()\n```\n\nYou'll want to leave space in your package for a continuous color scale\nthat will receive a `_c()` suffix.\n\n### Create fill scale functions, too\n\nFinally, you'll also want to create `scale_fill_...()` functions as well.\nYou can create those using the same `branded_palette()` functions\nyou used for `scale_color_branded()`,\nwith the small tweak of replacing `\"color\"` with `\"fill\"`\nas the first argument to `ggplot2::discrete_scale()`\n\n### What about three colors?\n\n[Emily Riederer](https://emilyriederer.netlify.com/)\nhas a neat function in her [Rtistic](https://github.com/emilyriederer/rtistic) package template\nthat I highly recommend you check out if you're making a package of branded <span class=\"pkg\">ggplot2</span> and <span class=\"pkg\">rmarkdown</span> themes.\n\nShe calls it `scale_color_opinionated()`\nand it works similarly to the functions I've laid out,\nexcept that it provides a color scale specifically for categorical variables with three levels: `\"good\"`, `\"neutral\"`, and `\"bad\"`.\n\nIf this sounds like something you do frequently, consider adding an opinionated function to your package!\n\n### Thanks\n\nThanks for reading!\nFind me on Twitter [&commat;grrrck](https://twitter.com/grrrck)\nto let me know if this post was helpful.\n\nAnd thanks to\n[Benjamin Wolfe](https://twitter.com/BenjaminWolfe)\nfor inspiring this post!\n\n`{{% twitter \"1161844769624137728\" %}}`{=html}\n\n\n\n",
    "supporting": [
      "custom-discrete-color-scales-for-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}