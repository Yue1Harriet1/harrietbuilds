{
  "hash": "7da9160ccbf9886072b60b82594c77b5",
  "result": {
    "markdown": "---\ntitle: Create a GitHub issue from a reprex with shrtcts\nauthor: Garrick Aden-Buie\ndate: '2021-09-03'\nslug: shrtcts-reprex-to-issue\ncategories:\n  - R\n  - Addin\n  - Shortcuts\n  - GitHub\n  - reprex\ndescription: |\n  Turn a reprex into a GitHub issue using a custom RStudio addin with shrtcts.\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2021/shrtcts-reprex-to-issue/index.Rmarkdown'\nkeywords: rstats\n---\n\n\n[reprex]: https://reprex.tidyverse.org/\n[shrtcts]: https://pkg.garrickadenbuie.com/shrtcts\n[rstudioapi]: https://rstudio.github.io/rstudioapi/\n[roxygen2]: https://roxygen2.r-lib.org/\n\n::: lead\n\nHave you ever spent a few ~~minutes~~ hours turning a bug in your code\ninto a [reprex] -- a minimal **repr**oducible **ex**ample?\n\nGetting to a reprex is 90% of the challenge.\nMost of the time, I find my mistake in the journey to a reprex.\nBut sometimes, I find a legitimate bug and in those cases,\nI want to quickly turn my reprex into a GitHub issue.\n\nHere's a quick way to get there using an RStudio addin and <span class=\"pkg\">[shrtcts]</span>.\n\n:::\n\n## `reprex` is awesome\n\nThe <span class=\"pkg\">[reprex]</span> package is **awesome**.\nIf you've never used it before,\nI highly recommend that you stop reading this blog\nand go watch [Sharla Gelfand's _make a reprex... please_](https://youtu.be/G5Nm-GpmrLw?t=60)\n(or [read the slides from the talk](https://make-a-reprex-please.netlify.app/)).\n\nYour goal when making a reprex is to come up with a short bit of code\nthat demonstrates the problem you've experienced\nand that is as self-contained as possible.\n\nTo disentangle your problem from your personal R environment,\n<span class=\"pkg\">reprex</span> takes your code,\nruns it in an isolated environment,\nand returns a rendered version of your code\nthat's ready to be copy-pasted into a text box\non a number of common websites where R users go for help.\n\nThis last feature is one of my favorites:\nthe rendered format of a `reprex`\nis the perfect way to start crafting a GitHub issue.\nTypically, I'll work out the reprex locally,\nthen use the **Reprex selection** RStudio addin to render the code,\nand finally jump over to the issues tab of a GitHub repo to paste the code right there.\n\nHere's an example reprex from [Sharla's talk](https://make-a-reprex-please.netlify.app/#33).\nWe start with plain [R code](/blog/shrtcts-reprex-to-issue/?panelset=r-code#panelset_r-code).\n<span class=\"pkg\">reprex</span> renders the R code with additional information about my session\nand [shows me a preview](/blog/shrtcts-reprex-to-issue/?panelset=reprex-preview#panelset_reprex-preview).\nAnd finally it also copies [the markdown I need](/blog/shrtcts-reprex-to-issue/?panelset=clipboard#panelset_clipboard)\nin order to paste the reprex into a GitHub issue or other online location.\n\n:::::: {.panelset .panelset--bordered}\n::: panel\n[R Code]{.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ntibble(date = \"2020-01-01\") %>%\n  mutate(year = case_when(\n    date <= \"2020-12-31\" & date >= \"2020-01-01\" ~ 2020,\n    is.na(date) ~ NA\n  ))\n```\n:::\n\n:::\n\n::: panel\n[Reprex Preview]{.panel-name}\n\n\n::: {.cell}\n\n:::\n\n\n``` r\nlibrary(tidyverse)\n\ntibble(date = \"2020-01-01\") %>%\n  mutate(year = case_when(\n    date <= \"2020-12-31\" & date >= \"2020-01-01\" ~ 2020,\n    is.na(date) ~ NA\n  ))\n#> Error in `mutate()`:\n#> ! Problem while computing `year = case_when(...)`.\n#> Caused by error in `case_when()`:\n\n#> Backtrace:\n#>      ▆\n#>   1. ├─tibble(date = \"2020-01-01\") %>% ...\n#>   2. ├─dplyr::mutate(...)\n#>   3. ├─dplyr:::mutate.data.frame(...)\n#>   4. │ └─dplyr:::mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())\n#>   5. │   ├─base::withCallingHandlers(...)\n#>   6. │   └─mask$eval_all_mutate(quo)\n#>   7. └─dplyr::case_when(...)\n#>   8.   └─dplyr:::replace_with(...)\n#>   9.     └─dplyr:::check_type(val, x, name, error_call = error_call)\n#>  10.       └─rlang::abort(msg, call = error_call)\n```\n\n<sup>Created on 2023-02-12 with [reprex v2.0.2](https://reprex.tidyverse.org)</sup>\n\n<details style=\"margin-bottom:10px;\">\n<summary>\nSession info\n</summary>\n\n``` r\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.2 (2022-10-31)\n#>  os       macOS Big Sur ... 10.16\n#>  system   x86_64, darwin17.0\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       America/New_York\n#>  date     2023-02-12\n#>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n#>  cli           3.6.0      2023-01-09 [1] CRAN (R 4.2.0)\n#>  colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n#>  DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n#>  digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.0)\n#>  dplyr       * 1.0.10     2022-09-01 [1] CRAN (R 4.2.0)\n#>  ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n#>  evaluate      0.19       2022-12-13 [1] CRAN (R 4.2.0)\n#>  fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n#>  fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n#>  forcats     * 0.5.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  fs            1.5.2      2021-12-08 [1] CRAN (R 4.2.0)\n#>  generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.0)\n#>  ggplot2     * 3.4.0      2022-11-04 [1] CRAN (R 4.2.0)\n#>  glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n#>  gtable        0.3.1      2022-09-01 [1] CRAN (R 4.2.0)\n#>  hms           1.1.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  htmltools     0.5.4      2022-12-07 [1] CRAN (R 4.2.0)\n#>  knitr         1.42       2023-01-25 [1] CRAN (R 4.2.0)\n#>  lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.0)\n#>  lubridate   * 1.9.0      2022-11-06 [1] CRAN (R 4.2.0)\n#>  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n#>  pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n#>  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n#>  purrr       * 1.0.1      2023-01-10 [1] CRAN (R 4.2.0)\n#>  R.cache       0.15.0     2021-04-30 [1] CRAN (R 4.2.0)\n#>  R.methodsS3   1.8.1      2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.oo          1.24.0     2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.utils       2.11.0     2021-09-26 [1] CRAN (R 4.2.0)\n#>  R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n#>  readr       * 2.1.3      2022-10-01 [1] CRAN (R 4.2.0)\n#>  reprex        2.0.2      2022-08-17 [1] CRAN (R 4.2.0)\n#>  rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.0)\n#>  rmarkdown     2.20       2023-01-19 [1] CRAN (R 4.2.0)\n#>  scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n#>  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n#>  stringi       1.7.12     2023-01-11 [1] CRAN (R 4.2.0)\n#>  stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.2.0)\n#>  styler        1.7.0      2022-03-13 [1] CRAN (R 4.2.0)\n#>  tibble      * 3.1.8      2022-07-22 [1] CRAN (R 4.2.0)\n#>  tidyr       * 1.2.1      2022-09-08 [1] CRAN (R 4.2.0)\n#>  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.0)\n#>  tidyverse   * 1.3.2.9000 2023-01-28 [1] Github (tidyverse/tidyverse@53199b7)\n#>  timechange  * 0.1.1      2022-11-04 [1] CRAN (R 4.2.0)\n#>  tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.0)\n#>  utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n#>  vctrs         0.5.1      2022-11-16 [1] CRAN (R 4.2.0)\n#>  withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n#>  xfun          0.36       2022-12-21 [1] CRAN (R 4.2.0)\n#>  yaml          2.3.6      2022-10-18 [1] CRAN (R 4.2.0)\n#> \n#>  [1] /Users/garrick/Library/R/x86_64/4.2/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n</details>\n:::\n\n::: panel\n[Clipboard]{.panel-name}\n\n````markdown\n``` r\nlibrary(tidyverse)\n\ntibble(date = \"2020-01-01\") %>%\n  mutate(year = case_when(\n    date <= \"2020-12-31\" & date >= \"2020-01-01\" ~ 2020,\n    is.na(date) ~ NA\n  ))\n#> Error in `mutate()`:\n#> ! Problem while computing `year = case_when(...)`.\n#> Caused by error in `case_when()`:\n\n#> Backtrace:\n#>      ▆\n#>   1. ├─tibble(date = \"2020-01-01\") %>% ...\n#>   2. ├─dplyr::mutate(...)\n#>   3. ├─dplyr:::mutate.data.frame(...)\n#>   4. │ └─dplyr:::mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())\n#>   5. │   ├─base::withCallingHandlers(...)\n#>   6. │   └─mask$eval_all_mutate(quo)\n#>   7. └─dplyr::case_when(...)\n#>   8.   └─dplyr:::replace_with(...)\n#>   9.     └─dplyr:::check_type(val, x, name, error_call = error_call)\n#>  10.       └─rlang::abort(msg, call = error_call)\n```\n\n<sup>Created on 2023-02-12 with [reprex v2.0.2](https://reprex.tidyverse.org)</sup>\n\n<details style=\"margin-bottom:10px;\">\n<summary>\nSession info\n</summary>\n\n``` r\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.2 (2022-10-31)\n#>  os       macOS Big Sur ... 10.16\n#>  system   x86_64, darwin17.0\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       America/New_York\n#>  date     2023-02-12\n#>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n#>  cli           3.6.0      2023-01-09 [1] CRAN (R 4.2.0)\n#>  colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n#>  DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n#>  digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.0)\n#>  dplyr       * 1.0.10     2022-09-01 [1] CRAN (R 4.2.0)\n#>  ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n#>  evaluate      0.19       2022-12-13 [1] CRAN (R 4.2.0)\n#>  fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n#>  fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n#>  forcats     * 0.5.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  fs            1.5.2      2021-12-08 [1] CRAN (R 4.2.0)\n#>  generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.0)\n#>  ggplot2     * 3.4.0      2022-11-04 [1] CRAN (R 4.2.0)\n#>  glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n#>  gtable        0.3.1      2022-09-01 [1] CRAN (R 4.2.0)\n#>  hms           1.1.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  htmltools     0.5.4      2022-12-07 [1] CRAN (R 4.2.0)\n#>  knitr         1.42       2023-01-25 [1] CRAN (R 4.2.0)\n#>  lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.0)\n#>  lubridate   * 1.9.0      2022-11-06 [1] CRAN (R 4.2.0)\n#>  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n#>  pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n#>  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n#>  purrr       * 1.0.1      2023-01-10 [1] CRAN (R 4.2.0)\n#>  R.cache       0.15.0     2021-04-30 [1] CRAN (R 4.2.0)\n#>  R.methodsS3   1.8.1      2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.oo          1.24.0     2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.utils       2.11.0     2021-09-26 [1] CRAN (R 4.2.0)\n#>  R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n#>  readr       * 2.1.3      2022-10-01 [1] CRAN (R 4.2.0)\n#>  reprex        2.0.2      2022-08-17 [1] CRAN (R 4.2.0)\n#>  rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.0)\n#>  rmarkdown     2.20       2023-01-19 [1] CRAN (R 4.2.0)\n#>  scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n#>  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n#>  stringi       1.7.12     2023-01-11 [1] CRAN (R 4.2.0)\n#>  stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.2.0)\n#>  styler        1.7.0      2022-03-13 [1] CRAN (R 4.2.0)\n#>  tibble      * 3.1.8      2022-07-22 [1] CRAN (R 4.2.0)\n#>  tidyr       * 1.2.1      2022-09-08 [1] CRAN (R 4.2.0)\n#>  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.0)\n#>  tidyverse   * 1.3.2.9000 2023-01-28 [1] Github (tidyverse/tidyverse@53199b7)\n#>  timechange  * 0.1.1      2022-11-04 [1] CRAN (R 4.2.0)\n#>  tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.0)\n#>  utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n#>  vctrs         0.5.1      2022-11-16 [1] CRAN (R 4.2.0)\n#>  withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n#>  xfun          0.36       2022-12-21 [1] CRAN (R 4.2.0)\n#>  yaml          2.3.6      2022-10-18 [1] CRAN (R 4.2.0)\n#> \n#>  [1] /Users/garrick/Library/R/x86_64/4.2/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n</details>\n````\n:::\n\n::::::\n\n\n## But wait, there's more!\n\nWhen you're working on debugging something,\ngoing from code in your RStudio IDE to something you can share with others is **huge**.\nBut <span class=\"pkg\">reprex</span> can do more!\n\nBecause reprex uses `knitr::spin()` —\n[_knitr's best hidden gem_ according to Dean Attali](https://deanattali.com/2015/03/24/knitrs-best-hidden-gem-spin/) —\nto turn R code into an R Markdown document,\nyou have a few more options.\n\n`knitr::spin()` has a cool feature that lets you write markdown _in an R script_.\nYou can check out\n[Dean Attali's post](https://deanattali.com/2015/03/24/knitrs-best-hidden-gem-spin/)\nfor more details,\nbut the gist is this:\nany text on a line starting with a special comment format `#'`\nbecomes markdown.\n\nThis means we can add text directly to our reprex using these comments!\nBelow you can see that I've added some exposition around the problematic code.\n\n\n:::::: {.panelset .panelset--bordered}\n::: panel\n[R Code]{.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' I'm using the latest version of the `tidyverse`,\n#' freshly installed.\nlibrary(tidyverse)\n\n#' Suppose we have a data frame with a date column.\n#' The date is stored as a _character_ vector, and\n#' I'd like to convert it to a _year_ with a simple\n#' comparison. The first function I thought of was\n#' `case_when()`, but it doesn't seem to be doing\n#' what I expect. Why am I getting this error?\ntibble(date = \"2020-01-01\") %>%\n  mutate(year = case_when(\n    date <= \"2020-12-31\" & date >= \"2020-01-01\" ~ 2020,\n    is.na(date) ~ NA\n  ))\n```\n:::\n\n:::\n\n::: panel\n[Reprex Preview]{.panel-name}\n\n\n::: {.cell}\n\n:::\n\n\nI’m using the latest version of the `tidyverse`,\nfreshly installed.\n\n``` r\nlibrary(tidyverse)\n```\n\nSuppose we have a data frame with a date column.\nThe date is stored as a *character* vector, and\nI’d like to convert it to a *year* with a simple\ncomparison. The first function I thought of was\n`case_when()`, but it doesn’t seem to be doing\nwhat I expect. Why am I getting this error?\n\n``` r\ntibble(date = \"2020-01-01\") %>%\n  mutate(year = case_when(\n    date <= \"2020-12-31\" & date >= \"2020-01-01\" ~ 2020,\n    is.na(date) ~ NA\n  ))\n#> Error in `mutate()`:\n#> ! Problem while computing `year = case_when(...)`.\n#> Caused by error in `case_when()`:\n\n#> Backtrace:\n#>      ▆\n#>   1. ├─tibble(date = \"2020-01-01\") %>% ...\n#>   2. ├─dplyr::mutate(...)\n#>   3. ├─dplyr:::mutate.data.frame(...)\n#>   4. │ └─dplyr:::mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())\n#>   5. │   ├─base::withCallingHandlers(...)\n#>   6. │   └─mask$eval_all_mutate(quo)\n#>   7. └─dplyr::case_when(...)\n#>   8.   └─dplyr:::replace_with(...)\n#>   9.     └─dplyr:::check_type(val, x, name, error_call = error_call)\n#>  10.       └─rlang::abort(msg, call = error_call)\n```\n\n<sup>Created on 2023-02-12 with [reprex v2.0.2](https://reprex.tidyverse.org)</sup>\n\n<details style=\"margin-bottom:10px;\">\n<summary>\nSession info\n</summary>\n\n``` r\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.2 (2022-10-31)\n#>  os       macOS Big Sur ... 10.16\n#>  system   x86_64, darwin17.0\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       America/New_York\n#>  date     2023-02-12\n#>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n#>  cli           3.6.0      2023-01-09 [1] CRAN (R 4.2.0)\n#>  colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n#>  DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n#>  digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.0)\n#>  dplyr       * 1.0.10     2022-09-01 [1] CRAN (R 4.2.0)\n#>  ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n#>  evaluate      0.19       2022-12-13 [1] CRAN (R 4.2.0)\n#>  fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n#>  fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n#>  forcats     * 0.5.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  fs            1.5.2      2021-12-08 [1] CRAN (R 4.2.0)\n#>  generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.0)\n#>  ggplot2     * 3.4.0      2022-11-04 [1] CRAN (R 4.2.0)\n#>  glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n#>  gtable        0.3.1      2022-09-01 [1] CRAN (R 4.2.0)\n#>  hms           1.1.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  htmltools     0.5.4      2022-12-07 [1] CRAN (R 4.2.0)\n#>  knitr         1.42       2023-01-25 [1] CRAN (R 4.2.0)\n#>  lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.0)\n#>  lubridate   * 1.9.0      2022-11-06 [1] CRAN (R 4.2.0)\n#>  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n#>  pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n#>  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n#>  purrr       * 1.0.1      2023-01-10 [1] CRAN (R 4.2.0)\n#>  R.cache       0.15.0     2021-04-30 [1] CRAN (R 4.2.0)\n#>  R.methodsS3   1.8.1      2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.oo          1.24.0     2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.utils       2.11.0     2021-09-26 [1] CRAN (R 4.2.0)\n#>  R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n#>  readr       * 2.1.3      2022-10-01 [1] CRAN (R 4.2.0)\n#>  reprex        2.0.2      2022-08-17 [1] CRAN (R 4.2.0)\n#>  rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.0)\n#>  rmarkdown     2.20       2023-01-19 [1] CRAN (R 4.2.0)\n#>  scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n#>  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n#>  stringi       1.7.12     2023-01-11 [1] CRAN (R 4.2.0)\n#>  stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.2.0)\n#>  styler        1.7.0      2022-03-13 [1] CRAN (R 4.2.0)\n#>  tibble      * 3.1.8      2022-07-22 [1] CRAN (R 4.2.0)\n#>  tidyr       * 1.2.1      2022-09-08 [1] CRAN (R 4.2.0)\n#>  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.0)\n#>  tidyverse   * 1.3.2.9000 2023-01-28 [1] Github (tidyverse/tidyverse@53199b7)\n#>  timechange  * 0.1.1      2022-11-04 [1] CRAN (R 4.2.0)\n#>  tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.0)\n#>  utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n#>  vctrs         0.5.1      2022-11-16 [1] CRAN (R 4.2.0)\n#>  withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n#>  xfun          0.36       2022-12-21 [1] CRAN (R 4.2.0)\n#>  yaml          2.3.6      2022-10-18 [1] CRAN (R 4.2.0)\n#> \n#>  [1] /Users/garrick/Library/R/x86_64/4.2/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n</details>\n:::\n\n::: panel\n[Clipboard]{.panel-name}\n\n````markdown\nI’m using the latest version of the `tidyverse`,\nfreshly installed.\n\n``` r\nlibrary(tidyverse)\n```\n\nSuppose we have a data frame with a date column.\nThe date is stored as a *character* vector, and\nI’d like to convert it to a *year* with a simple\ncomparison. The first function I thought of was\n`case_when()`, but it doesn’t seem to be doing\nwhat I expect. Why am I getting this error?\n\n``` r\ntibble(date = \"2020-01-01\") %>%\n  mutate(year = case_when(\n    date <= \"2020-12-31\" & date >= \"2020-01-01\" ~ 2020,\n    is.na(date) ~ NA\n  ))\n#> Error in `mutate()`:\n#> ! Problem while computing `year = case_when(...)`.\n#> Caused by error in `case_when()`:\n\n#> Backtrace:\n#>      ▆\n#>   1. ├─tibble(date = \"2020-01-01\") %>% ...\n#>   2. ├─dplyr::mutate(...)\n#>   3. ├─dplyr:::mutate.data.frame(...)\n#>   4. │ └─dplyr:::mutate_cols(.data, dplyr_quosures(...), caller_env = caller_env())\n#>   5. │   ├─base::withCallingHandlers(...)\n#>   6. │   └─mask$eval_all_mutate(quo)\n#>   7. └─dplyr::case_when(...)\n#>   8.   └─dplyr:::replace_with(...)\n#>   9.     └─dplyr:::check_type(val, x, name, error_call = error_call)\n#>  10.       └─rlang::abort(msg, call = error_call)\n```\n\n<sup>Created on 2023-02-12 with [reprex v2.0.2](https://reprex.tidyverse.org)</sup>\n\n<details style=\"margin-bottom:10px;\">\n<summary>\nSession info\n</summary>\n\n``` r\nsessioninfo::session_info()\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.2.2 (2022-10-31)\n#>  os       macOS Big Sur ... 10.16\n#>  system   x86_64, darwin17.0\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       America/New_York\n#>  date     2023-02-12\n#>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown)\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package     * version    date (UTC) lib source\n#>  assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n#>  cli           3.6.0      2023-01-09 [1] CRAN (R 4.2.0)\n#>  colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n#>  DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n#>  digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.0)\n#>  dplyr       * 1.0.10     2022-09-01 [1] CRAN (R 4.2.0)\n#>  ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n#>  evaluate      0.19       2022-12-13 [1] CRAN (R 4.2.0)\n#>  fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n#>  fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n#>  forcats     * 0.5.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  fs            1.5.2      2021-12-08 [1] CRAN (R 4.2.0)\n#>  generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.0)\n#>  ggplot2     * 3.4.0      2022-11-04 [1] CRAN (R 4.2.0)\n#>  glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n#>  gtable        0.3.1      2022-09-01 [1] CRAN (R 4.2.0)\n#>  hms           1.1.2      2022-08-19 [1] CRAN (R 4.2.0)\n#>  htmltools     0.5.4      2022-12-07 [1] CRAN (R 4.2.0)\n#>  knitr         1.42       2023-01-25 [1] CRAN (R 4.2.0)\n#>  lifecycle     1.0.3      2022-10-07 [1] CRAN (R 4.2.0)\n#>  lubridate   * 1.9.0      2022-11-06 [1] CRAN (R 4.2.0)\n#>  magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n#>  pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n#>  pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n#>  purrr       * 1.0.1      2023-01-10 [1] CRAN (R 4.2.0)\n#>  R.cache       0.15.0     2021-04-30 [1] CRAN (R 4.2.0)\n#>  R.methodsS3   1.8.1      2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.oo          1.24.0     2020-08-26 [1] CRAN (R 4.2.0)\n#>  R.utils       2.11.0     2021-09-26 [1] CRAN (R 4.2.0)\n#>  R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n#>  readr       * 2.1.3      2022-10-01 [1] CRAN (R 4.2.0)\n#>  reprex        2.0.2      2022-08-17 [1] CRAN (R 4.2.0)\n#>  rlang         1.0.6      2022-09-24 [1] CRAN (R 4.2.0)\n#>  rmarkdown     2.20       2023-01-19 [1] CRAN (R 4.2.0)\n#>  scales        1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n#>  sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n#>  stringi       1.7.12     2023-01-11 [1] CRAN (R 4.2.0)\n#>  stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.2.0)\n#>  styler        1.7.0      2022-03-13 [1] CRAN (R 4.2.0)\n#>  tibble      * 3.1.8      2022-07-22 [1] CRAN (R 4.2.0)\n#>  tidyr       * 1.2.1      2022-09-08 [1] CRAN (R 4.2.0)\n#>  tidyselect    1.2.0      2022-10-10 [1] CRAN (R 4.2.0)\n#>  tidyverse   * 1.3.2.9000 2023-01-28 [1] Github (tidyverse/tidyverse@53199b7)\n#>  timechange  * 0.1.1      2022-11-04 [1] CRAN (R 4.2.0)\n#>  tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.0)\n#>  utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n#>  vctrs         0.5.1      2022-11-16 [1] CRAN (R 4.2.0)\n#>  withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n#>  xfun          0.36       2022-12-21 [1] CRAN (R 4.2.0)\n#>  yaml          2.3.6      2022-10-18 [1] CRAN (R 4.2.0)\n#> \n#>  [1] /Users/garrick/Library/R/x86_64/4.2/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.2/Resources/library\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n</details>\n````\n::::\n\n::::::\n\n\n## There should be a shortcut\n\nKick-starting an issue report using a reprex\nright from within my RStudio session is great,\nbut there's still the part where I have to slog\nout of my IDE,\ninto a browser,\nand find my way to the repo where this issue should go.\n\nMost of the time, though, I'm already **in the repo**.\nAnd <span class=\"pkg\">usethis</span> has\n[a helpful function](https://usethis.r-lib.org/reference/browse-this.html)\nto get me right to the issues page:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::browse_github_issues()\n```\n:::\n\n\nBut there's too much typing.\nI want reprex to issue, _with magic_ &#x1F9D9; &#x2728;.\n\nSo that's what we'll do!\nIn the rest of this post,\nwe'll use <span class=\"pkg\">reprex</span> and the <span class=\"pkg\">[rstudioapi]</span> package\nto automatically go from code to GitHub issue.\nThen we'll wrap that logic into a function\nand turn it into an RStudio Addin with my package, <span class=\"pkg\">[shrtcts]</span>.\n\n## From reprex to issue\n\nSuppose we have some `input` code and a target `repo`.\nMaybe we have a classic missing argument error\nand we want to send the issue to [gadenbuie/shrtcts](https://github.com/gadenbuie/shrtcts)\n(please don't!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- \"runif(min = 0, max = 10)\\n\"\nrepo <- \"gadenbuie/shrtcts\"\n```\n:::\n\n\n### Prepare the issue body\n\nOur goal is to render the reprex into an issue `body`\nand then we'll put together a URL\nthat takes us to GitHub's\n[new issue page](https://github.com/gadenbuie/shrtcts/issues/new)\nfor the `repo` with the issue `body` pre-filled when we get there.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbody <- \"... reprex body goes here ...\"\nurl_new_issue <- glue::glue(\"https://github.com/{repo}/issues/new?body={body}\")\nbrowseURL(url_new_issue)\n```\n:::\n\n\nThe trick here is that you can create a new issue by going to\n`github.com/{owner}/{repo}/issues/new`\nand we're sending along the initial body using\n[the query string](https://url.spec.whatwg.org/#dom-urlsearchparams-urlsearchparams)\n`?body={body}`.\n\nTo put together the `body`, we first render the `input` using `reprex::reprex()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbody <- reprex::reprex(input = input, venue = \"gh\", html_preview = TRUE)\n```\n:::\n\n\nwhere we've asked for a reprex for GitHub — `venue = \"gh\"` —\nand a local HTML preview — `html_preview = TRUE`.\nYou can adjust the arguments to `reprex()` to fit your needs, of course.\n\nUnfortunately, `reprex::repex()` is only half the work...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbody <- reprex::reprex(input = input, venue = \"gh\", html_preview = TRUE)\nbody\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"``` r\"                                                                           \n[2] \"runif(min = 0, max = 10)\"                                                        \n[3] \"#> Error in runif(min = 0, max = 10): argument \\\"n\\\" is missing, with no default\"\n[4] \"```\"                                                                             \n```\n:::\n:::\n\n\nNotice that it returns a character vector\nwith one item per line of the rendered reprex.\nWe need to collapse it all into a single string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbody <- paste(body, collapse = \"\\n\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"``` r\\nrunif(min = 0, max = 10)\\n#> Error in runif(min = 0, max = 10): argument \\\"n\\\" is missing, with no default\\n```\"\n```\n:::\n:::\n\n\nBut this still won't fit in a URL\nbecause it contains spaces, new lines, and other characters URLs don't like.\nSo we need to use the base R function `URLencode()`\nto turn the `body` text into something readable only by machines.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbody <- URLencode(body, reserved = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"%60%60%60%20r%0Arunif%28min%20%3D%200%2C%20max%20%3D%2010%29%0A%23%3E%20Error%20in%20runif%28min%20%3D%200%2C%20max%20%3D%2010%29%3A%20argument%20%22n%22%20is%20missing%2C%20with%20no%20default%0A%60%60%60\"\n```\n:::\n:::\n\n\nFinally, we can make our new issue URL.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_new_issue <- glue::glue(\"https://github.com/{repo}/issues/new?body={body}\")\nurl_new_issue\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://github.com/gadenbuie/shrtcts/issues/new?body=%60%60%60%20r%0Arunif%28min%20%3D%200%2C%20max%20%3D%2010%29%0A%23%3E%20Error%20in%20runif%28min%20%3D%200%2C%20max%20%3D%2010%29%3A%20argument%20%22n%22%20is%20missing%2C%20with%20no%20default%0A%60%60%60\n```\n:::\n:::\n\n\nI didn't make the link clickable,\nbut if you were to follow it,\nyou'd find a brand new issue page ready for you.\n\n![A new GitHub issue page with our reprex as the issue body](reprex-new-issue.png)\n\n### Grab the input from the user\n\nOf course,\nwe don't want to have to define `input` manualy every time we run this function.\nInstead, we'd rather get the `input` code from\n\n- the current selection in RStudio\n- or the clipboard if nothing is selected\n\nTo make things easy,\nwe'll ignore the fact that RStudio has a multiple cursors feature,\nand we'll just get the first selection of code.\nWe'll use the `getSourceEditorContext()` to get the currently open text file,\nthen we can grab the text from the first selection in that editor window.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nctx <- rstudioapi::getSourceEditorContext()\nselection <- ctx$selection[[1]]$text\n```\n:::\n\n\nIf nothing is selected, `selection` will be an empty string, `\"\"`,\nin which case we'd prefer to leave `input` as `NULL`\nso that `reprex()` will look in the clipboard for our input.\nWe also need to make sure that `input` is a character vector\nso that `reprex()` knows that `input` contains the reprex code and not a path to a file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- if (nzchar(selection)) {\n  c(strsplit(selection, \"\\n\")[[1]], \"\")\n}\n```\n:::\n\n\nWe'll be wrapping this up in a function where\n`input` might be provided by the user,\nso we'll only want to check for a selection if `input` is `NULL`.\n\n\n::: {.cell style='true'}\n\n```{.r .cell-code}\nif (is.null(input)) {\n  ctx <- rstudioapi::getSourceEditorContext()\n  selection <- ctx$selection[[1]]$text\n  input <- if (nzchar(selection)) {\n    c(strsplit(selection, \"\\n\")[[1]], \"\")\n  }\n}\n```\n:::\n\n\n### Pick the repository\n\nOften, I'll be working in the repository where I want to create the issue.\n<span class=\"pkg\">usethis</span> does a great job guessing the repository\nfrom the information in a local copy of the repo.\nRather than spending forever writing our own version,\nlet's just reach into <span class=\"pkg\">usethis</span> with `:::` to call `target_repo_spec()`.\n\nThe function returns the current repo in the form `\"owner/repo\"`,\nbut since it isn't designed to be user-facing\nit throws an unusual error when called from outside a git repository.\nWe can soften this edge by catching the error with `tryCatch()`\nand replacing the error with a `NULL` value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepo_guess <- tryCatch(\n  usethis:::target_repo_spec(\"source\", FALSE),\n  error = function(err) NULL\n)\n```\n:::\n\n\nOf course, maybe I'll want to create a reprex\nin _another_ repository that isn't the one I'm currently working in.\nSo we can follow up with a prompt asking for the repo,\nusing our guess from <span class=\"pkg\">usethis</span>.\nThe prompt is created with the `showPrompt()` function from <span class=\"pkg\">rstudioapi</span>.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepo <- rstudioapi::showPrompt(\n  title = \"Which repository?\",\n  message = \"Where should we create the issue? (owner/repo)\",\n  default = repo_guess\n)\n```\n:::\n\n\n<p class=\"center\"><img src=\"ask-repo-manual.png\" alt=\"RStudio menu asking to the user to manually enter a repository.\" style=\"max-width:min(400px, 100%);display: block\"></p>\n\nFinally, the function we're putting together will also take a `repo` argument\nthat _might be_ provided when we call it.\nIn that case,\nwe'd wouldn't need to guess or ask for a repo.\n\n\n::: {.cell style='true'}\n\n```{.r .cell-code}\nif (is.null(repo)) {\n  repo_guess <- tryCatch(\n    usethis:::target_repo_spec(\"source\", FALSE),\n    error = function(err) NULL\n  )\n\n  repo <- rstudioapi::showPrompt(\n    title = \"Which repository?\",\n    message = \"Where should we create the issue? (owner/repo)\",\n    default = repo_guess\n  )\n}\n```\n:::\n\n\n## Make it a shortcut\n\nThe last step in our process is to make it easy to run this code in RStudio,\nideally as an\n[RStudio addin](https://rstudio.github.io/rstudioaddins/)\nthat we can activate from the addins menu or\n[the command palette](https://blog.rstudio.com/2020/10/14/rstudio-v1-4-preview-command-palette/).\n\nThis is the exact goal of the <span class=\"pkg\">[shrtcts]</span> package:\n<span class=\"pkg\">shrtcts</span> lets you turn any function into an RStudio addin.\n\n### Set up `shrtcts`\n\nIf you've never used <span class=\"pkg\">shrtcts</span> before,\nyou need to do two things to get started.\nFirst, install the package,\nfrom [my R-universe](https://gadenbuie.r-universe.dev)\nor from [GitHub](https://github.com/gadenbuie/shrtcts).\n\n:::: {.panelset .panelset--bordered}\n::: panel\n[R-universe]{.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add my universe to your list of repos\noptions(repos = c(\n  gadenbuie = \"https://gadenbuie.r-universe.dev\",\n  getOption(\"repos\")\n))\n\ninstall.package(\"shrtcts\")\n```\n:::\n\n:::\n\n::: panel\n[GitHub]{.panel-name}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"remotes\")\n\nremotes::install_github(\"gadenbuie/shrtcts\")\n```\n:::\n\n:::\n::::\n\nThe next thing to do is to open a `.shrtcts.R` file\nwhere we'll add our new shortcut.\nThis is easy to do with `shrtcts::edit_shortcuts()`,\nwhich will offer to create the `.shrtcts.R` file if it doesn't exit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshrtcts::edit_shortcuts()\n```\n:::\n\n\n```\nWould you like to create a new shrtcts file at\n'~/Library/Application Support/shrtcts/.shrtcts.R' (Yes/no/cancel) yes\n```\n\n### Creating a shortcut function\n\nWe'll write R functions in the `.shrtcts.R` file\nand turn them into RStudio addins\nby annotating those functions with roxygen-style comments.\n\nWe start with a skeleton of a function that takes two arguments:\n`input` and `repo`,\nneither of which are required.\nInside the function, we'll do all the steps from above,\nwhich we'll fill in in a second.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_issue_from_reprex <- function(input = NULL, repo = NULL) {\n  # guess or ask for repo\n  # get current selection, if available\n  # render reprex\n  # compose new issue URL\n  # go to the new issue page!\n}\n```\n:::\n\n\nOur next step is to turn this function into a shortcut.\nUsing <span class=\"pkg\">[roxygen2]</span> documentation syntax,\nwe give the function a title and description —\nthese will be used as the title and description of the shortcut.\nWe can also use the `@shortcut` tag to set a keyboard shortcut (if you want),\nand the `@interactive` tag lets shortcuts know\nthat the addin should be run interactively rather than in the background.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Create issue from reprex\n#'\n#' Creates an issue from the selected or copied reprex.\n#'\n#' @shortcut Cmd+Ctrl+Shift+R\n#' @interactive\ncreate_issue_from_reprex <- function(input = NULL, repo = NULL) {\n  # guess or ask for repo\n  # get current selection, if available\n  # render reprex\n  # compose new issue URL\n  # go to the new issue page!\n}\n```\n:::\n\n\nFinally, we can replace our placeholder comments\nwith all of the code we wrote above.\n\n\n::: {.cell style='true'}\n\n```{.r .cell-code}\n#' Create issue from reprex\n#'\n#' Creates an issue from the selected or copied reprex.\n#'\n#' @shortcut Cmd+Ctrl+Shift+R\n#' @interactive\ncreate_issue_from_reprex <- function(input = NULL, repo = NULL) {\n  if (is.null(repo)) {\n    repo_guess <- tryCatch(\n      usethis:::target_repo_spec(\"source\", FALSE),\n      error = function(err) NULL\n    )\n  \n    repo <- rstudioapi::showPrompt(\n      title = \"Which repository?\",\n      message = \"Where should we create the issue? (owner/repo)\",\n      default = repo_guess\n    )\n  }\n\n  if (is.null(input)) {\n    ctx <- rstudioapi::getSourceEditorContext()\n    selection <- ctx$selection[[1]]$text\n    input <- if (nzchar(selection)) {\n      c(strsplit(selection, \"\\n\")[[1]], \"\")\n    }\n  }\n\n  body <- reprex::reprex(input = input, venue = \"gh\", html_preview = TRUE)\n  body <- paste(body, collapse = \"\\n\")\n  body <- URLencode(body, reserved = TRUE)\n  url_new_issue <- glue::glue(\"https://github.com/{repo}/issues/new?body={body}\")\n  browseURL(url_new_issue)\n  invisible(url_new_issue)\n}\n```\n:::\n\n\nLoad your shortcuts and restart your R session to activate the addin\nand you'll be ready to jump from reprex to GitHub issue in no time!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshrtcts::add_rstudio_shortcuts(set_keyboard_shortcuts = TRUE)\n```\n:::\n\n\n<div class=\"figure\">\n<img src=\"shrtcts-reprex.gif\" alt=\"A demonstration of the reprex shortcut: highlight code in RStudio editor, run the 'reprex to issue' shortcut, and create a new github issue\" >\n<p class=\"caption\">The reprex to GitHub issue shortcut in action.</p>\n</div>\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/panelset-0.2.6/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/panelset-0.2.6/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}