{
  "hash": "65ff9c3a35614659435603a74ab06e09",
  "result": {
    "markdown": "---\ntitle: countdown v0.4.0 – Now on CRAN!\nauthor: Garrick Aden-Buie\ndate: '2022-08-15'\nslug: countdown-v0.4.0\ncategories:\n  - R\n  - My Projects\n  - Slides\n  - countdown\n  - Shiny\n  - JavaScript\n  - Apps\n  - Announcement\n  - xaringan\n  - Quarto\ndescription: |\n  countdown v0.4.0 is now available on CRAN with a ton of new features!\nimage: feature.png\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2022/countdown-v0-4-0/index.Rmarkdown'\nkeywords: rstats\neditor_options:\n  chunk_output_type: console\n---\n\n\n<!-- Links -->\n[countdown]: https://pkg.garrickadenbuie.com/countdown\n[xaringan]: https://slides.yihui.org/xaringan\n[quarto]: https://quarto.org\n[rmarkdown]: https://rmarkdown.rstudio.com\n[shiny]: https://shiny.rstudio.com\n[gh]: https://github.com/gadenbuie/countdown\n[ru]: https://gadenbuie.r-universe.dev/\n\n\n\n\n\n::: lead\n\nI'm [stoked]{.superlative} to announce that [countdown] is now available on CRAN!\nCountdown to something awesome in [xaringan], [Quarto], [R Markdown][rmarkdown], or [Shiny].\n\nIn this post,\nI [reflect](#reflection) a bit on the development of [countdown],\nbut you can also skip straight to the [release notes](#release)!\n\n:::\n\n\n## What is countdown?\n\n::: {.d-flex}\n\n::: {.justify-content-center}\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"first-example\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative;width: max-content; max-width: 100%\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n:::\n:::\n\n:::\n\n::: {.justify-content-start}\n`countdown()` is a simple timer you can use in presentations, documents and Shiny apps.\nIt's great for teaching or breakout sessions!\n\n[&#x1F448;]{.di-ns .dn}[&#x261D;&#xFE0F;]{.di .dn-ns}\n**Click** the timer to start it.\n**Click** again to pause.\n**Double click** to reset it.\nAdjust the timer on the fly with the **&plus;** and **&minus;** buttons.\n:::\n\n:::\n\nEverything you need to know about countdown,\nyou can learn from the docs-slash-presentation\nat [pkg.garrickadenbuie.com/countdown][countdown].\n\n::: {.feature}\n\n::: feature-row\n::: {.feature-timer}\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"feature\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative;width: max-content; max-width: 100%\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">01</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">30</span></code>\n</div>\n```\n:::\n:::\n\n:::\n\n::: feature-code\n```r\ncountdown::countdown(\n  minutes = 1,\n  seconds = 30,\n  warn_when = 30\n)\n```\n:::\n:::\n\n::: feature-footer\n<code><span class=\"o-60\">pkg.garrickadenbuie.com/</span>countdown</code>\n:::\n\n:::\n\n\n::: {.cell}\n<style type=\"text/css\">\n.feature {\n  width: 800px;\n  height: calc(800px / 1.945);\n  display: flex;\n  display: none;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n.feature-row {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  font-size: 1.5rem;\n  padding-bottom: 2em;\n}\n.feature-row > .feature-code {\n  margin-left: 2em;\n}\n.feature-footer {\n  position: absolute;\n  bottom: 0em;\n  left: 0;\n  right: 0;\n  text-align: center;\n  font-size: 1.5rem;\n  font-family: var(--font-monospace);\n}\n</style>\n:::\n\n\n\n\n## Installing countdown\n\nInstalling countdown is now a whole lot easier:\n\n```r\ninstall.packages(\"countdown\")\n```\n\nAs always, you can still get the latest and greatest in-development versions\nfrom [GitHub][gh]\n\n``` r\n# install.packages(\"remotes\")\nremotes::install_github(\"gadenbuie/countdown\")\n```\n\nor from [gadenbuie.r-universe.dev][ru].\n\n``` r\noptions(repos = c(\n  gadenbuie = 'https://gadenbuie.r-universe.dev',\n  CRAN = 'https://cloud.r-project.org'\n))\n\ninstall.packages('countdown')\n```\n\n\n## A brief history of countdown {#reflection}\n\nBefore we talk about [all the new things in countdown](#release),\nI want to take a small minute to get nostalgic.\nI hope you don't mind indulging me\n(or [skip ahead](#release) if you'd rather get right to business).\n\n### rstudio::conf(2019)\n\nIn 2019 I went to [rstudio::conf](https://www.rstudio.com/resources/rstudioconf-2019/) in Austin, TX\nwhere a highlight of the conference, for me,\nwas the [Train-the-Trainer: Tidyverse Track](https://github.com/rstudio-education/teach-tidy)\nworkshop by Garrett Grolemund and [Greg Wilson](https://third-bit.com/).\nThat workshop specifically marked a turning point in my career\nand I left rstudio::conf very inspired to build and teach cool things in R.\n\nI also walked away from rstudio::conf(2019) with another key take away:\nit was time to learn JavaScript.\nAn odd thing to take away from an R conference, yes.\n(Although I don't think I'm alone in this kind of realization;\nthis year many people left rstudio::conf(2022) thinking that\n[it's time to learn Python](https://twitter.com/asmae_toumi/status/1552731475434430465).)\n\nThese two inspirations came together in my first post-conf project:\na countdown timer for [xaringan] slides.\n\n::: {.float-md-end .ps-md-4 .mx-sm-auto style=\"max-width:22rem\"}\n![A slide from Garrett's workshop materials with a 4-minute timer in the lower right corner.](https://pkg.garrickadenbuie.com/countdown/img/teach-tidyverse-timer.png)\n:::\n\nGarrett used timers extensively to pace break out sessions\nand they worked surprisingly well to keep everyone on track.\nOne funny thing I noticed during our workshop session\nwas that Garrett would frequently have to switch to slide-edit mode (in Keynote, I think)\nto fiddle with the timer as he adjusted the length of the \"your turn\" session.\nThis is pretty normal;\nan instructor probably has a sense of approximately how long an activity will take\nand we'll often will adjust the time spent on the activity\nbased on how the audience is doing,\nhow well the material is working,\nor how close to lunch or a break we are in the session.\n\nSo my idea was to build a countdown timer\nthat you could drop into a slide\nand easily use to time an event.\nI also wanted to make it easy to adjust the time,\nbut my JavaScript skills were limited to what I could learn from StackOverflow,\nso I compromised and decided that you could only bump the timer up.\nAfter all it's not like you _have_ to end the timer,\nyou can always just move on in your slides.\n\n### It becomes an R package\n\nI cobbled together an R package\nthat was a fairly decent R interface\naround a collection of lines of JavaScript that I barely understood,\nthat somehow assembled into an actual working timer.\nI made a cool [intro-slash-docs presentation][countdown]\nand would probably have sat on it for a while longer\nif it weren't for [Mara Averick](https://twitter.com/dataandme)\nwho spotted my GitHub activity\nand [soft-announced the package for me](https://twitter.com/dataandme/status/1125747630489911297).\n\nNot long after that,\nand slightly to my horror\n(_please don't go looking at my JavaScript code_),\n[Hadley](https://twitter.com/hadleywickham) submitted an issue.\nActually, two issues.\nObviously, that was an exciting turn of events.\nHis suggestions were solid and helped improve the quality of the timer:\nhe suggested a [warning state](https://github.com/gadenbuie/countdown/issues/5)\nand a [full-screen view/app](https://github.com/gadenbuie/countdown/issues/6).\n\nAmazingly, the package worked!\nPeople really seemed to like it,\nit solved a niche but useful need that many people have when teaching,\nand it let me learn a ton about how to build htmlwidgets in R.\nI'm proud of the R interface — it's easy to use and configure —\nand I think the feature set hits the right balance of\nlooking good right out of the box\nwithout doing _too much_.\n\n### But that JavaScript code...\n\nSince I wrote the first version of countdown,\nI've learned a whole lot more JavaScript\nand I know a whole lot more about how to build _web things_ in R.\ncountdown's underlying code has always haunted me a little,\nbut on the other hand it was chugging away,\nstill working fine for most people in most situations.\n\nSo I left it alone...\n\n![Screenshot of the countdown GitHub repository page where the phrase \"3 years ago\" is highlighted. That is GitHub's summary of the last time I updated countdown.](countdown-history-3-years.png)\n\n...for almost 3 years.\n\nAnd _wow how much has changed_ in the three plus years since rstudio::conf(2019).\nNot only did I lead a workshop _about JavaScript_ for Shiny users at rstudio::conf(2020)\n(hashtag [js4shiny](https://js4shiny.com)),\nand not only do I now work for RStudio[^posit],\nbut I was also part of the program committee for conference planning.\nWhich means I saw colleagues were still using my countdown timer in workshop slides.\n\n[^posit]: At least until October: [RStudio is becoming Posit](https://www.rstudio.com/blog/rstudio-is-becoming-posit/).\n\nAnd that old franken-JavaScript code still haunted me.\n\nSo this year,\nin part inspired by the return of\n_[the final](https://www.rstudio.com/blog/rstudio-is-becoming-posit/)_\n[rstudio::conf](https://rstudio.com/conference),\nI decided that finally rewriting that JavaScript\nwould be the perfect conference side-hack project.\n\nWhich led to countdown v0.4.0 arriving on CRAN!\n\n## coundown v0.4.0 {#release}\n\n\n\n\n::: {.cell}\n<style type=\"text/css\">\npre:empty {\n  border-left: none !important;\n}\n</style>\n:::\n\n\n### The Old JavaScript\n\nMy first implementation relied heavily on the JavaScript function\n[`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout),\nwhich takes a `function` and a `delay` in milliseconds:\n`setTimeout(function, delay)`.\nWhen called, the browser waits until the delay is over and then calls the function.\n\nA neat trick with `setTimeout`\nis that you can call it recursively inside a function\nas a way to run that function repeatedly.\nBelow I've defined a function `timerTick()`\nthat moves the timer forward one tick.\nIt also uses `setTimeout` to schedule the next tick of the timer.\nAnd by using a delay of `1000` milliseconds,\nI've set up a function that runs once per second —\njust like a clock &#x1F609;.\n\nThis is, essentially, how countdown worked before.\nFor each run of `timerTick()`,\nI would decrement the number of remaining seconds by one\nand update the timer.\nIf there's time left on the timer,\nthen `timerTick()` shcedules another update for 1 second later.\nIf there isn't any time left,\nwe can stop the timer\nby simply not scheduling any more timer updates.\n\n\n::: {.cell}\n\n```{.js .cell-code}\nfunction timerTick() {\n  const timer = document.getElementById('timer')\n\n  // update the timer\n  timer.value -= 1\n  console.log(`${timer.value}s remaining...`)\n\n  if (timer.value > 0) {\n    // there's time left, schedule next tick\n    setTimeout(timerTick, 1000)\n  } else {\n    // time is up, reset the timer\n    console.log(`Time's up!`)\n    timer.classList.remove('running')\n    timer.innerText = 'Start Timer'\n    // notice we don't schedule another tick\n  }\n}\n```\n:::\n\n\nAnd this works<sup>*</sup>! Try it out by clicking the button below.\n\n\n```{=html}\n<button id=\"timer\" class=\"btn btn-primary\" value=5>Start Countdown</button>\n```\n\n::: {.cell}\n<div id=\"out-simple-timer\"><pre></pre></div>\n<script type=\"text/javascript\">\nconst log_out_simple_timer = redirectLogger(document.querySelector(\"#out-simple-timer > pre\"))\ndocument.addEventListener(\"DOMContentLoaded\", function() {\nlog_out_simple_timer(`function timerTick() {\n  const timer = document.getElementById('timer')\n\n  // update the timer\n  timer.value -= 1\n  console.log(\\`\\${timer.value}s remaining...\\`)\n\n  if (timer.value > 0) {\n    // there's time left, schedule next tick\n    setTimeout(timerTick, 1000)\n  } else {\n    // time is up, reset the timer\n    console.log(\\`Time's up!\\`)\n    timer.classList.remove('running')\n    timer.innerText = 'Start Timer'\n    // notice we don't schedule another tick\n  }\n}\n\nfunction timerClear() {\n  // Clear the console output\n  console.clear()\n  // Reset the timer's starting value\n  const timer = document.getElementById('timer')\n  timer.value = 5\n  console.log(\\`\\${timer.value}s remaining...\\`)\n}\n\ndocument\n  .getElementById('timer')\n  .addEventListener('click', function({ target: timer }) {\n    if (timer.classList.contains('running')) {\n      // timer is running, do nothing\n      return\n    } else {\n      timer.classList.add('running')\n      timer.innerText = 'Timer is running...'\n    }\n    timerClear()\n    setTimeout(timerTick, 1000)\n  })`)\n})\n</script>\n:::\n\n\n<sup>*</sup>Almost.\nThis _almost_ works.\nIt works pretty well if you start the timer\nand then don't touch the browser window or switch to another tab.\nSo it does usually work fine when you're presenting slides.\n\nBut it turns out that `setTimeout()` is more like `suggestThatThisRunsLater()`.\nThere's really no guarantee that the function you scheduled to run\n1,000 milliseconds from now is actually going to run in 1,000 milliseconds.\n\nThere are many things that can get in the way of that function being run when you expect it.\nIf you move to a different tab and come back, for example,\nthere's no guarantee that the background tab would keep chugging along,\nrunning my function every seconds.\nBrowsers have better things to do\nand they'll de-prioritize pages that aren't being actively shown to users.\nThis means that sometimes `setTimeout(fn, 1000)` runs `fn` 1 second from now,\nbut depending on what else the browser is doing it could be a lot longer than that.\n\nSo how do we get around this? &#x1F914;\n\n### All New JavaScript\n\nThe new JavaScript version of countdown does something really simple.\nIt doesn't rely on `setTimeout()` directly to keep track of the time.\n\nYes, it still schedules the next tick on 1 second intervals,\nbut it doesn't trust that _exactly one second_ has passed.\nNow, when the user starts the timer,\ncountdown will note when the timer should end\nand recalculates the remaining time with each tick.\nThis means the updates are always accurate,\neven if there happen to be 4 seconds between consecutive ticks.\n\nIt also means that we can bump a running timer up or down\nby moving that end time later or earlier.\nTo stop the timer,\nwe just note how much time is left\nand to restart it again we recalculate the end time\nbased on how much time was left when we paused.\n\nThere's a small amount of internal state to keep track of,\nwhich happens to basically cry out for a\n[JavaScript class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class).\nSo the new countdown timer is implemented via a `CountdownTimer` class.\n\nHere's a sketch of the class containing three core methods:\n\n1. `tick()` runs the timer, like above, except this time we calculate the remaining number of seconds on each tick.\n   When there are less than 0 seconds left, we call the `finish()` method.\n\n2. `start()` gets things started by calculating when the timer should end and kicking off the `tick()` method.\n\n3. `finish()` wraps up by resetting the timer.\n\n\n::: {.cell}\n\n```{.js .cell-code}\nclass Timer {\n  constructor(el, duration) {\n    // The timer's attached to a button\n    this.element = el\n    // it has a duration that's set when initiated\n    this.duration = duration\n    // and it will have an end when running\n    this.end = null\n  }\n\n  tick () {\n    // decide and report how much time is left\n    const remaining = this.end - Date.now()\n    console.log(`${remaining / 1000}s remaining...`)\n\n    // and then schedule the next tick or finish up\n    if (remaining > 0) {\n      setTimeout(this.tick.bind(this), 1000)\n    } else {\n      this.finish()\n    }\n  }\n\n  start () {\n    if (this.end) return\n\n    console.clear()\n    this.element.innerText = 'Timer is running...'\n    // the timer ends duration (s) * 1000 (ms) from now\n    this.end = Date.now() + this.duration * 1000\n    this.tick()\n  }\n\n  finish () {\n    this.end = null\n    this.element.innerText = 'Start Timer'\n    console.log(`Time's up!`)\n  }\n}\n```\n:::\n\n```{=html}\n<button id=\"timer-two\" class=\"btn btn-primary\">Start Countdown</button>\n```\n\n::: {.cell}\n<div id=\"out-timer-two\"><pre></pre></div>\n<script type=\"text/javascript\">\nconst log_out_timer_two = redirectLogger(document.querySelector(\"#out-timer-two > pre\"))\ndocument.addEventListener(\"DOMContentLoaded\", function() {\nlog_out_timer_two(`class Timer {\n  constructor(el, duration) {\n    // The timer's attached to a button\n    this.element = el\n    // it has a duration that's set when initiated\n    this.duration = duration\n    // and it will have an end when running\n    this.end = null\n  }\n\n  tick () {\n    // decide and report how much time is left\n    const remaining = this.end - Date.now()\n    console.log(\\`\\${remaining / 1000}s remaining...\\`)\n\n    // and then schedule the next tick or finish up\n    if (remaining > 0) {\n      setTimeout(this.tick.bind(this), 1000)\n    } else {\n      this.finish()\n    }\n  }\n\n  start () {\n    if (this.end) return\n\n    console.clear()\n    this.element.innerText = 'Timer is running...'\n    // the timer ends duration (s) * 1000 (ms) from now\n    this.end = Date.now() + this.duration * 1000\n    this.tick()\n  }\n\n  finish () {\n    this.end = null\n    this.element.innerText = 'Start Timer'\n    console.log(\\`Time's up!\\`)\n  }\n}\n\nconst timerTwo = document.getElementById('timer-two')\ntimerTwo.timer = new Timer(timerTwo, 5)\ntimerTwo.addEventListener('click', function({ target: el }) {\n  el.timer.start()\n})`)\n})\n</script>\n:::\n\n\nRun the 5-second timer by clicking the button above.\nNotice that even though we used the same `setTimeout(code, 1000)` as before\nto schedule each tick for one second later,\nbecause this version precisely reports how much time is left\nyou can see that our timer drifts a bit away from running perfectly\n_once per second_.\n\n### New buttons and keyboard interactions\n\nBeyond the improved timer,\nthe new `CountdownTimer` class\nmakes it a whole lot easier to add additional features\nthat need to build on the timer's internal state.\n\nFor example, you can now\n\n* Click to start or stop the timer\n* Double click to reset\n* Bump the timer up or down using the **&plus;** and **&minus;** buttons\n* Do all of the above with keyboard shortcus:\n\n    * <kbd>Space</kbd> or <kbd>Enter</kbd> to start or stop the timer\n\n    * <kbd>Esc</kbd> to reset\n\n    * <kbd>&uarr;</kbd> or <kbd>&darr;</kbd> to bump up or down\n\n### Shiny!\n\nThe shiny new countdown package also has plenty of Shiny features.\nCountdown timers can be controlled directly from Shiny\nwith `countdown_action()` or `countdown_update()`\nand timers are now also inputs that report their state!\n\nYou can find an example Shiny app with a timer,\nplus an explanation of how it all works,\nby running\n\n\n::: {.cell}\n\n:::\n\n\nto launch an example app.\nThe example app is also available on my website at\n[apps.garrickadenbuie.com/countdown-shiny-example](https://apps.garrickadenbuie.com/countdown-shiny-example).\n\nIn a nutshell,\nthe timer will report its state using its input `id`.\nFor example,\n`countdown(id = \"timer\")` will report its state to Shiny\nvia `input$timer`.\nThe input reports the `event` that caused the state to change\nand the state of the `timer`:\n\n\n::: {.cell}\n\n:::\n\n\nHere's another small app that demonstrate how you could use a button\nto toggle the state of the timer.\n\n\n::: {.cell}\n\n:::\n\n\n### Improved countdown App\n\n::: {.float-md-end .ps-md-4 .mx-sm-auto style=\"max-width:22rem\"}\n![A screenshot of the full screen countdown timer app.](https://pkg.garrickadenbuie.com/countdown/img/countdown-app.png)\n:::\n\nAll of the Shiny updates mentioned above are used to power `countdown_app()`,\na full screen Shiny app for running timers.\nThese work really well for timing speakers at conferences\nor for a quick way to keep track of a break out session in workshops or meetings.\n\nThe app itself received a few upgrades,\nmost importantly is the ability to share a timer\nwith the settings you want\nusing the URL.\nThis uses Shiny's [Bookmarking state](https://shiny.rstudio.com/articles/bookmarking-state.html)\nfeatures to save your settings in the URL\nand restore them when you load that link.\n\nFor example,\n[this timer is a 20 minute timer with a warning at 5 minutes that updates every 10 seconds](https://apps.garrickadenbuie.com/countdown/?_inputs_&time=%2220%3A00%22&update_every=%2210%22&warn_time=%225%3A00%22).\n\n### New Options\n\nFinally, countdown gained a new option.\nYou can now start the timer as soon as it is visible\nby setting `start_immediately = TRUE`.\nThe \"as as soon as it's visible\" works pretty well:\nin xaringan and Quarto slides it starts when you land on the slide\nand in regular HTML documents the timer starts when you\nscroll the timer into view.\n\nIt's also worth mentioning that countdown now uses\n[prismatic](https://emilhvitfeldt.github.io/prismatic/)\nfor color calculations.\nI was really happy to see that [Emil](https://twitter.com/Emil_Hvitfeldt)\nadded [`best_contrast()`](https://emilhvitfeldt.github.io/prismatic/reference/best_contrast.html)\nand switching to use that function cleaned up a lot of internal code for me!\n\n## Thank you!\n\nHuge thanks to the many people who opened issues or contributed code to countdown\nover these years. You all rock &#x1F9E1;\n\n[&#x0040;andrewpbray](https://github.com/andrewpbray),\n[&#x0040;apreshill](https://github.com/apreshill),\n[&#x0040;ConnorJPSmith](https://github.com/ConnorJPSmith),\n[&#x0040;csgillespie](https://github.com/csgillespie),\n[&#x0040;Dr-Joe-Roberts](https://github.com/Dr-Joe-Roberts),\n[&#x0040;fvitalini](https://github.com/fvitalini),\n[&#x0040;hadley](https://github.com/hadley),\n[&#x0040;HaoZeke](https://github.com/HaoZeke),\n[&#x0040;jhelvy](https://github.com/jhelvy),\n[&#x0040;jvcasillas](https://github.com/jvcasillas),\n[&#x0040;moshpirit](https://github.com/moshpirit),\n[&#x0040;rtheodoro](https://github.com/rtheodoro),\n[&#x0040;sje30](https://github.com/sje30),\n[&#x0040;spcanelon](https://github.com/spcanelon),and\n[&#x0040;thiyangt](https://github.com/thiyangt).\n\nIf you've read this far, thank you!\nThanks for using countdown and making developing R packages fun.\nReach out in the comments or on Twitter (I'm [&commat;grrrck](https://twitter.com/grrrck))\nwith any questions or thoughts &#x263A;&#xFE0F;\n\n\n::: {.cell}\n<style type=\"text/css\">\n.superlative {\n  border-bottom: 1px dashed;\n  cursor: pointer;\n}\n.superlative:hover {\n  color: var(--bs-warning);\n}\n.slide-preview {\n  max-width: 480px;\n}\n</style>\n:::\n\n::: {.cell}\n<div id=\"out-unnamed-chunk-6\"><pre></pre></div>\n<script type=\"text/javascript\">\nconst log_out_unnamed_chunk_6 = redirectLogger(document.querySelector(\"#out-unnamed-chunk-6 > pre\"))\ndocument.addEventListener(\"DOMContentLoaded\", function() {\nlog_out_unnamed_chunk_6(`document.querySelector('.superlative').addEventListener('click', function(ev) {\n  const superlatives = [\n    'delighted', 'charmed', 'elated', 'excited', 'pleased', 'thrilled', 'chuffed',\n    'tickled pink', 'overjoyed', 'ecstatic', 'stoked', 'proud', 'fired up'\n  ]\n  const el = ev.target\n  const idx = Math.floor(Math.random() * superlatives.length)\n  el.innerText = superlatives[idx]\n})`)\n})\n</script>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n<link href=\"../../site_libs/js4shiny-0.0.28/jsonview/jsonview.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/js4shiny-0.0.28/jsonview/jsonview.min.js\"></script>\n<link href=\"../../site_libs/js4shiny-redirectConsoleLog-0.0.28/jslog.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/js4shiny-redirectConsoleLog-0.0.28/redirectConsoleLog.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}