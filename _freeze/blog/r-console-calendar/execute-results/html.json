{
  "hash": "39271a0dc5b73157bafea0d42d2b789d",
  "result": {
    "markdown": "---\ntitle: A Calendar in Your R Console\nauthor: Garrick Aden-Buie\ndate: '2020-09-21'\nslug: r-console-calendar\ncategories:\n  - Blog\ntags:\n  - R\n  - lubridate\ndescription: >\n  Print a nicely-formatted calendar in your R console.\nimages:\n  - /blog/r-console-calendar/social-card.png\nsource_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2020/2020-09-21-a-calendar-in-your-r-console.Rmarkdown'\nkeywords: rstats\neditor_options:\n  chunk_output_type: console\n---\n\n\n<!-- Links -->\n[lubridate]: https://lubridate.tidyverse.org\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n\nToday I was [nerd sniped](https://xkcd.com/356/)\nby [Mike FC](https://coolbutuseless.com)\nwho goes by [&commat;coolbutuseless](https://twitter.com/coolbutuseless)\non Twitter despite the fact that he makes cool and useful things on the regular.\n\nIn his tweet, he shows a neat trick that works on Unix or macOS machines.\nThese systems come with a command-line utility called `cal` ([read more here](https://www.computerhope.com/unix/ucal.htm)).\nBy calling `cal` from the R console using `system()`,\nyou can print a calendar in your console.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(\"cal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    January 2023      \nSu Mo Tu We Th Fr Sa  \n 1  2  3  4  5  6  7  \n 8  9 10 11 12 13 14  \n15 16 17 18 19 20 21  \n22 23 24 25 26 27 28  \n29 30 31              \n                      \n```\n:::\n:::\n\n\nHere's Mike's [original tweet](https://twitter.com/coolbutuseless/status/1308163906674790402).\n\n\n\n\n\n<center><a href=\"https://twitter.com/coolbutuseless/status/1308163906674790402\"><img src=\"coolbutuseless-tweet.png\" style=\"width:100%;max-width:400px;\" /></a></center>\n\nThis is neat and all, but it doesn't work on [Windows](https://twitter.com/davidbraze/status/1308177449784610817) &#x1F622; &#x1F937;&#x200D;.\n\nSo I used <span class=\"pkg\">[lubridate]</span> and <span class=\"pkg\">[crayon](https://github.com/r-lib/crayon)</span>\nto recreate `cal` with an R function `cal()`.\nI'm not going to do a full walk through of the code,\nbut I still wanted to share it.\nRead on to explore the code or to try out the function yourself.\n\n## Tidy Dates\n\nThe first step was to write a function to set up a data frame of dates.\nThis I cribbed heavily from <span class=\"pkg\">[ggweekly](/blog/ggplot2-weekly-planner/)</span>.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_month_dates <- function(start_date, end_date, week_start = 1) {\n  if (identical(week_start, 7)) {\n    get_week <- lubridate::epiweek\n    get_year <- lubridate::epiyear\n  } else if (identical(week_start, 1)) {\n    get_week <- lubridate::isoweek\n    get_year <- lubridate::isoyear\n  }\n\n  if (!inherits(start_date, \"Date\")) {\n    start_date <- lubridate::ymd(start_date, truncated = 1)\n  }\n  if (!inherits(end_date, \"Date\")) {\n    end_date <- lubridate::ymd(end_date, truncated = 1)\n  }\n\n  start_date <- lubridate::floor_date(start_date, \"month\")\n  end_date <- lubridate::rollback(lubridate::ceiling_date(end_date, \"month\"))\n\n  tibble::tibble(\n    date      = seq(start_date, end_date, by = \"day\"),\n    day       = lubridate::day(date),\n    wday      = lubridate::wday(.data$date, label = FALSE, abbr = TRUE, week_start = week_start),\n    weekend   = lubridate::wday(.data$date, label = FALSE, week_start = 1) %in% 6:7,\n    week      = get_week(.data$date),\n    month     = lubridate::month(.data$date, label = TRUE, abbr = FALSE),\n    month_int = lubridate::month(.data$date, label = FALSE),\n    year      = get_year(.data$date)\n  )\n}\n```\n:::\n\n\nThe `make_month_dates()` function takes a full year-month-day or a year-month\nand returns the dates between the month start of the `start_date`\nand the month end of the `end_date`.\nWeeks can start on Monday (`1`) or Sunday (`7`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_month_dates(\"2020-09\", \"2020-11\", week_start = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 91 × 8\n   date         day  wday weekend  week month     month_int  year\n   <date>     <int> <dbl> <lgl>   <dbl> <ord>         <dbl> <dbl>\n 1 2020-09-01     1     2 FALSE      36 September         9  2020\n 2 2020-09-02     2     3 FALSE      36 September         9  2020\n 3 2020-09-03     3     4 FALSE      36 September         9  2020\n 4 2020-09-04     4     5 FALSE      36 September         9  2020\n 5 2020-09-05     5     6 TRUE       36 September         9  2020\n 6 2020-09-06     6     7 TRUE       36 September         9  2020\n 7 2020-09-07     7     1 FALSE      37 September         9  2020\n 8 2020-09-08     8     2 FALSE      37 September         9  2020\n 9 2020-09-09     9     3 FALSE      37 September         9  2020\n10 2020-09-10    10     4 FALSE      37 September         9  2020\n# … with 81 more rows\n```\n:::\n:::\n\n\n## Make it a Calendar\n\nThe next step is to wrangle the dates into a calendar shape.\nFor this step, I used <span class=\"pkg\">dplyr</span>, <span class=\"pkg\">tidyr</span>, and <span class=\"pkg\">lubridate</span> together.\n\nThe gist of the process is to\n\n1. Fill in the blank days for \"missing\" weekdays in the first or last week of each month\n\n1. Create the month-calendar title and collapse each week into a single line\n\n1. Determine how many calendars fit on each row and paste each *n*th week together into a single line\n\n1. Finally print each line to print rows of calendars!\n\nCheck out the whole function below for the complete details.\nI used package prefixes (and `cur_group_id()` from <span class=\"pkg\">dplyr</span> 1.0.0),\nand I inlined the code from `make_month_dates()` above to facilitate copy-pasting-calendaring.\n\n<h4 id=\"code-cal\" class=\"js-expandmore expand-for-code\">R code</h4>\n\n<div class=\"js-to_expand is-opened\">\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncal <- function(\n  start_date = lubridate::today(),\n  end_date = start_date + 28,\n  week_start = 1\n) {\n  `%>%` <- dplyr::`%>%`\n\n  if (!inherits(start_date, \"Date\")) {\n    start_date <- lubridate::ymd(start_date, truncated = 1)\n  }\n  if (!inherits(end_date, \"Date\")) {\n    end_date <- lubridate::ymd(end_date, truncated = 1)\n  }\n\n  start_date <- lubridate::floor_date(start_date, \"month\")\n  end_date <- lubridate::rollback(lubridate::ceiling_date(end_date, \"month\"))\n\n  tibble::tibble(\n    date      = seq(start_date, end_date, by = \"day\"),\n    day       = lubridate::day(date),\n    wday      = lubridate::wday(.data$date, label = FALSE, abbr = TRUE, week_start = week_start),\n    weekend   = lubridate::wday(.data$date, label = FALSE, week_start = 1) %in% 6:7,\n    week      = as.integer(lubridate::floor_date(.data$date, unit = \"week\", week_start = week_start)),\n    month     = lubridate::month(.data$date, label = TRUE, abbr = FALSE),\n    month_int = lubridate::month(.data$date, label = FALSE),\n    year      = lubridate::year(lubridate::floor_date(.data$date, unit = \"year\", week_start = week_start))\n  ) %>%\n    dplyr::group_by(month, year) %>%\n    dplyr::mutate(week = week - min(week) + 1) %>%\n    dplyr::ungroup() %>%\n    tidyr::complete(tidyr::nesting(year, month_int, month), wday = 1:7, week) %>%\n    dplyr::arrange(year, month_int, week, wday) %>%\n    dplyr::mutate(\n      day = sprintf(\"%2s\", day),\n      day = dplyr::if_else(weekend, as.character(crayon::silver(day)), day),\n      day = dplyr::if_else(\n        date == lubridate::today(),\n        as.character(crayon::bold(crayon::red(day))),\n        day\n      ),\n      month_label = paste(month, year)\n    ) %>%\n    tidyr::replace_na(list(day = \"  \")) %>%\n    dplyr::group_by(year, month_int, month_label, week) %>%\n    dplyr::summarize(day = paste(day, collapse = \" \"), .groups = \"drop\") %>%\n    dplyr::group_by(month_int) %>%\n    dplyr::mutate(\n      width = max(crayon::col_nchar(day)),\n      day = crayon::col_align(day, width = width, align = \"right\"),\n      month_label = crayon::col_align(month_label, width = width, align = \"center\"),\n      month_label = crayon::bold(month_label)\n    ) %>%\n    dplyr::ungroup() %>%\n    dplyr::bind_rows(\n      dplyr::distinct(., year, month_int, day = month_label, week = 0)\n    ) %>%\n    dplyr::mutate(width = max(crayon::col_nchar(day))) %>%\n    dplyr::arrange(year, month_int, week) %>%\n    dplyr::group_by(year, month_int) %>%\n    dplyr::mutate(\n      row = dplyr::cur_group_id() - 1,\n      row = floor(row / (getOption(\"width\") %/% (width + 2))),\n    ) %>%\n    dplyr::group_by(row, week) %>%\n    dplyr::summarize(text = paste(day, collapse = \"    \"), .groups = \"drop_last\") %>%\n    dplyr::mutate(text = dplyr::if_else(week == max(week), paste0(text, \"\\n\"), text)) %>%\n    dplyr::pull(text) %>%\n    cli::cat_line()\n}\n```\n:::\n\n\nPhew, that's a lot.\nBut now I have a function `cal()` that prints out a calendar in my R console!\n\n</div>\n\n\n<STYLE type='text/css' scoped>\nPRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};\n</STYLE>\n\n::: {.cell}\n\n```{.r .cell-code}\ncal(\"2020-09\", \"2020-12\")\n```\n\n<PRE class=\"fansi fansi-output\"><CODE><span style='font-weight: bold;'>   September 2020   </span>    <span style='font-weight: bold;'>    October 2020    </span>\n    1  2  3  4 <span style='color: #555555;'> 5</span> <span style='color: #555555;'> 6</span>              1  2 <span style='color: #555555;'> 3</span> <span style='color: #555555;'> 4</span>\n 7  8  9 10 11 <span style='color: #555555;'>12</span> <span style='color: #555555;'>13</span>     5  6  7  8  9 <span style='color: #555555;'>10</span> <span style='color: #555555;'>11</span>\n14 15 16 17 18 <span style='color: #555555;'>19</span> <span style='color: #555555;'>20</span>    12 13 14 15 16 <span style='color: #555555;'>17</span> <span style='color: #555555;'>18</span>\n21 22 23 24 25 <span style='color: #555555;'>26</span> <span style='color: #555555;'>27</span>    19 20 21 22 23 <span style='color: #555555;'>24</span> <span style='color: #555555;'>25</span>\n28 29 30                26 27 28 29 30 <span style='color: #555555;'>31</span>   \n                                            \n\n<span style='font-weight: bold;'>    November 2020   </span>    <span style='font-weight: bold;'>    December 2020   </span>\n                  <span style='color: #555555;'> 1</span>        1  2  3  4 <span style='color: #555555;'> 5</span> <span style='color: #555555;'> 6</span>\n 2  3  4  5  6 <span style='color: #555555;'> 7</span> <span style='color: #555555;'> 8</span>     7  8  9 10 11 <span style='color: #555555;'>12</span> <span style='color: #555555;'>13</span>\n 9 10 11 12 13 <span style='color: #555555;'>14</span> <span style='color: #555555;'>15</span>    14 15 16 17 18 <span style='color: #555555;'>19</span> <span style='color: #555555;'>20</span>\n16 17 18 19 20 <span style='color: #555555;'>21</span> <span style='color: #555555;'>22</span>    21 22 23 24 25 <span style='color: #555555;'>26</span> <span style='color: #555555;'>27</span>\n23 24 25 26 27 <span style='color: #555555;'>28</span> <span style='color: #555555;'>29</span>    28 29 30 31         \n30                                          \n</CODE></PRE>\n:::\n\n\n***\n\nEdited on 2021-01-28 to fix a bug that caused days whose ISO weeks occur in an earlier year —\ne.g. 2021-01-01 is assigned to week 53 of 2020 —\nto appear in an incorrect year. Thanks [&commat;Darkyben](https://twitter.com/Darkyben/status/1354740287877378048)!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/clipboard-2.0.6/clipboard.min.js\"></script>\n<link href=\"../site_libs/xaringanExtra-clipboard-0.2.6/xaringanExtra-clipboard.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/xaringanExtra-clipboard-0.2.6/xaringanExtra-clipboard.js\"></script>\n<script>window.xaringanExtraClipboard(null, {\"button\":\"Copy Code\",\"success\":\"Copied!\",\"error\":\"Press Ctrl+C to Copy\"})</script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}