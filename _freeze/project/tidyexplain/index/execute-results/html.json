{
  "hash": "5d08d97d0b2aaa4851cab0de011ff887",
  "result": {
    "markdown": "---\ntitle: \"🤹 tidyexplain\"\ndate: '2018-08-27'\ndescription: Animations of tidyverse verbs using R, the tidyverse, and gganimate.\nimage: images/static/png/original-dfs.png\nslug: tidyexplain\ncategories: [\"Project\"]\ntags:\n  - Data Analysis\n  - Visualization\n  - SQL\n  - dplyr\n  - tidyr\n  - R\nlinks:\n- icon: github # icon name without the 'fa-'\n  name: Source\n  url: https://github.com/gadenbuie/tidyexplain\n---\n\n\n## Tidy Animated Verbs\n\n<!-- https://buttons.github.io/ -->\n<a class=\"github-button\" href=\"https://github.com/gadenbuie\" data-show-count=\"true\" aria-label=\"Follow @gadenbuie on GitHub\">Follow &commat;gadenbuie</a>&nbsp;\n<a class=\"github-button\" href=\"https://github.com/gadenbuie/tidyexplain\" data-icon=\"octicon-star\" data-show-count=\"true\" aria-label=\"Star gadenbuie/tidyexplain on GitHub\">Star</a>&nbsp;\n<a class=\"github-button\" href=\"https://github.com/gadenbuie/tidyexplain/fork\" data-icon=\"octicon-repo-forked\" data-show-count=\"true\" aria-label=\"Fork gadenbuie/tidyexplain on GitHub\">Fork</a>\n\n\n\n\n-   [**Mutating Joins**](#mutating-joins) —\n    [`inner_join()`](#inner-join), [`left_join()`](#left-join),\n    [`right_join()`](#right-join), [`full_join()`](#full-join)\n\n-   [**Filtering Joins**](#filtering-joins) —\n    [`semi_join()`](#semi-join), [`anti_join()`](#anti-join)\n\n-   [**Set Operations**](#set-operations) — [`union()`](#union),\n    [`union_all()`](#union-all), [`intersect()`](#intersection),\n    [`setdiff()`](#set-difference)\n\n-   [**Tidy Data**](#tidy-data) — [`pivot_wider()` and\n    `pivot_longer()`](#pivot-wider-and-longer), [`spread()` and\n    `gather()`](#spread-and-gather)\n\n-   Learn more about\n\n    -   [Using the animations and images](#usage)\n    -   [Relational Data](#relational-data)\n    -   [gganimate](#gganimate)\n\n## Background\n\n### Usage\n\nPlease feel free to use these images for teaching or learning about\naction verbs from the [tidyverse](https://tidyverse.org). You can\ndirectly download the [original animations](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/) or static images in\n[svg](https://github.com/gadenbuie/tidyexplain/blob/main/images/static/svg/) or [png](https://github.com/gadenbuie/tidyexplain/blob/main/images/static/png/) formats, or you\ncan use the [scripts](https://github.com/gadenbuie/tidyexplain/blob/main/R/) to recreate the images locally.\n\nCurrently, the animations cover the [dplyr two-table\nverbs](https://dplyr.tidyverse.org/articles/two-table.html) and I’d like\nto expand the animations to include more verbs from the tidyverse.\n[Suggestions are\nwelcome!](https://github.com/gadenbuie/tidy-animated-verbs/issues)\n\n### Relational Data\n\nThe [Relational Data](http://r4ds.had.co.nz/relational-data.html)\nchapter of the [R for Data Science](http://r4ds.had.co.nz/) book by\nGarrett Grolemund and Hadley Wickham is an excellent resource for\nlearning more about relational data.\n\nThe [dplyr two-table verbs\nvignette](https://dplyr.tidyverse.org/articles/two-table.html) and Jenny\nBryan’s [Cheatsheet for dplyr join\nfunctions](http://stat545.com/bit001_dplyr-cheatsheet.html) are also\ngreat resources.\n\n### gganimate\n\nThe animations were made possible by the newly re-written\n[gganimate](https://github.com/thomasp85/gganimate#README) package by\n[Thomas Lin Pedersen](https://github.com/thomasp85) (original by [Dave\nRobinson](https://github.com/dgrtwo)). The [package\nreadme](https://github.com/thomasp85/gganimate#README) provides an\nexcellent (and quick) introduction to gganimate.\n\n### Dynamic Animations\n\nThanks to an initial push by [David\nZimmermann](https://github.com/DavZim), we have begun work towards\nfunctions that generate dynamic animations from users’ actual data.\nPlease visit the [pkg\nbranch](https://github.com/gadenbuie/tidyexplain/tree/pkg) of the\ntidyexplain repository for more information (or to contribute!).\n\n## Mutating Joins\n\n> A mutating join allows you to combine variables from two tables. It\n> first matches observations by their keys, then copies across variables\n> from one table to the other.  \n> [R for Data Science: Mutating\n> joins](http://r4ds.had.co.nz/relational-data.html#mutating-joins)\n\n<img src=\"images/static/png/original-dfs.png\" width=\"480px\" />\n\n``` r\nx\n#> # A tibble: 3 × 2\n#>      id x    \n#>   <int> <chr>\n#> 1     1 x1   \n#> 2     2 x2   \n#> 3     3 x3\ny\n#> # A tibble: 3 × 2\n#>      id y    \n#>   <int> <chr>\n#> 1     1 y1   \n#> 2     2 y2   \n#> 3     4 y4\n```\n\n### Inner Join\n\n> All rows from `x` where there are matching values in `y`, and all\n> columns from `x` and `y`.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/inner-join.gif)\n\n``` r\ninner_join(x, y, by = \"id\")\n#> # A tibble: 2 × 3\n#>      id x     y    \n#>   <int> <chr> <chr>\n#> 1     1 x1    y1   \n#> 2     2 x2    y2\n```\n\n### Left Join\n\n> All rows from `x`, and all columns from `x` and `y`. Rows in `x` with\n> no match in `y` will have `NA` values in the new columns.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/left-join.gif)\n\n``` r\nleft_join(x, y, by = \"id\")\n#> # A tibble: 3 × 3\n#>      id x     y    \n#>   <int> <chr> <chr>\n#> 1     1 x1    y1   \n#> 2     2 x2    y2   \n#> 3     3 x3    <NA>\n```\n\n### Left Join (Extra Rows in y)\n\n> … If there are multiple matches between `x` and `y`, all combinations\n> of the matches are returned.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/left-join-extra.gif)\n\n``` r\ny_extra # has multiple rows with the key from `x`\n#> # A tibble: 4 × 2\n#>      id y    \n#>   <dbl> <chr>\n#> 1     1 y1   \n#> 2     2 y2   \n#> 3     4 y4   \n#> 4     2 y5\nleft_join(x, y_extra, by = \"id\")\n#> # A tibble: 4 × 3\n#>      id x     y    \n#>   <dbl> <chr> <chr>\n#> 1     1 x1    y1   \n#> 2     2 x2    y2   \n#> 3     2 x2    y5   \n#> 4     3 x3    <NA>\n```\n\n### Right Join\n\n> All rows from y, and all columns from `x` and `y`. Rows in `y` with no\n> match in `x` will have `NA` values in the new columns.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/right-join.gif)\n\n``` r\nright_join(x, y, by = \"id\")\n#> # A tibble: 3 × 3\n#>      id x     y    \n#>   <int> <chr> <chr>\n#> 1     1 x1    y1   \n#> 2     2 x2    y2   \n#> 3     4 <NA>  y4\n```\n\n### Full Join\n\n> All rows and all columns from both `x` and `y`. Where there are not\n> matching values, returns `NA` for the one missing.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/full-join.gif)\n\n``` r\nfull_join(x, y, by = \"id\")\n#> # A tibble: 4 × 3\n#>      id x     y    \n#>   <int> <chr> <chr>\n#> 1     1 x1    y1   \n#> 2     2 x2    y2   \n#> 3     3 x3    <NA> \n#> 4     4 <NA>  y4\n```\n\n## Filtering Joins\n\n> Filtering joins match observations in the same way as mutating joins,\n> but affect the observations, not the variables. … Semi-joins are\n> useful for matching filtered summary tables back to the original rows.\n> … Anti-joins are useful for diagnosing join mismatches.  \n> [R for Data Science: Filtering\n> Joins](http://r4ds.had.co.nz/relational-data.html#filtering-joins)\n\n### Semi Join\n\n> All rows from `x` where there are matching values in `y`, keeping just\n> columns from `x`.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/semi-join.gif)\n\n``` r\nsemi_join(x, y, by = \"id\")\n#> # A tibble: 2 × 2\n#>      id x    \n#>   <int> <chr>\n#> 1     1 x1   \n#> 2     2 x2\n```\n\n### Anti Join\n\n> All rows from `x` where there are not matching values in `y`, keeping\n> just columns from `x`.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/anti-join.gif)\n\n``` r\nanti_join(x, y, by = \"id\")\n#> # A tibble: 1 × 2\n#>      id x    \n#>   <int> <chr>\n#> 1     3 x3\n```\n\n## Set Operations\n\n> Set operations are occasionally useful when you want to break a single\n> complex filter into simpler pieces. All these operations work with a\n> complete row, comparing the values of every variable. These expect the\n> x and y inputs to have the same variables, and treat the observations\n> like sets.  \n> [R for Data Science: Set\n> operations](http://r4ds.had.co.nz/relational-data.html#set-operations)\n\n<img src=\"images/static/png/original-dfs-set-ops.png\" width=\"480px\" />\n\n``` r\nx\n#> # A tibble: 3 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     a    \n#> 2 1     b    \n#> 3 2     a\ny \n#> # A tibble: 2 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     a    \n#> 2 2     b\n```\n\n### Union\n\n> All unique rows from `x` and `y`.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/union.gif)\n\n``` r\nunion(x, y)\n#> # A tibble: 4 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     a    \n#> 2 1     b    \n#> 3 2     a    \n#> 4 2     b\n```\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/union-rev.gif)\n\n``` r\nunion(y, x)\n#> # A tibble: 4 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     a    \n#> 2 2     b    \n#> 3 1     b    \n#> 4 2     a\n```\n\n### Union All\n\n> All rows from `x` and `y`, keeping duplicates.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/union-all.gif)\n\n``` r\nunion_all(x, y)\n#> # A tibble: 5 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     a    \n#> 2 1     b    \n#> 3 2     a    \n#> 4 1     a    \n#> 5 2     b\n```\n\n### Intersection\n\n> Common rows in both `x` and `y`, keeping just unique rows.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/intersect.gif)\n\n``` r\nintersect(x, y)\n#> # A tibble: 1 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     a\n```\n\n### Set Difference\n\n> All rows from `x` which are not also rows in `y`, keeping just unique\n> rows.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/setdiff.gif)\n\n``` r\nsetdiff(x, y)\n#> # A tibble: 2 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 1     b    \n#> 2 2     a\n```\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/setdiff-rev.gif)\n\n``` r\nsetdiff(y, x)\n#> # A tibble: 1 × 2\n#>   x     y    \n#>   <chr> <chr>\n#> 1 2     b\n```\n\n## Tidy Data\n\n[Tidy data](http://r4ds.had.co.nz/tidy-data.html#tidy-data-1) follows\nthe following three rules:\n\n1.  Each variable has its own column.\n2.  Each observation has its own row.\n3.  Each value has its own cell.\n\nMany of the tools in the [tidyverse](https://tidyverse.org) expect data\nto be formatted as a tidy dataset and the\n[tidyr](https://tidyr.tidyverse.org) package provides functions to help\nyou organize your data into tidy data.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/static/png/original-dfs-tidy.png)\n\n``` r\nwide\n#> # A tibble: 2 × 4\n#>      id x     y     z    \n#>   <int> <chr> <chr> <chr>\n#> 1     1 a     c     e    \n#> 2     2 b     d     f\nlong\n#> # A tibble: 6 × 3\n#>      id key   val  \n#>   <int> <chr> <chr>\n#> 1     1 x     a    \n#> 2     2 x     b    \n#> 3     1 y     c    \n#> 4     2 y     d    \n#> 5     1 z     e    \n#> 6     2 z     f\n```\n\n### Pivot Wider and Longer\n\n`pivot_wider()` and `pivot_longer()` were introduced in [tidyr version\n1.0](https://www.tidyverse.org/blog/2019/09/tidyr-1-0-0/#pivoting)\n(released in September 2019). They provide a more consistent and more\npowerful approach to changing the fundamental shape of the data and are\n“modern alternatives to `spread()` and `gather()`.\n\nHere we show the very basic mechanics of pivoting, but there’s much more\nthat the pivot functions can do. You can learn more about them in the\n[Pivoting vignette in\ntidyr](https://tidyr.tidyverse.org/articles/pivot.html).\n\n``` r\npivot_wider(data, names_from = key, values_from = val)\n```\n\n> `pivot_wider()` “widens” data, increasing the number of columns and\n> decreasing the number of rows.\n\n``` r\npivot_longer(data, cols = x:y, names_to = \"key\", values_to = \"val\")\n```\n\n> `pivot_longer()` “lengthens” data, increasing the number of rows and\n> decreasing the number of columns.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/tidyr-pivoting.gif)\n\n### Spread and Gather\n\n``` r\nspread(data, key, value)\n```\n\n> Spread a key-value pair across multiple columns. Use it when an a\n> column contains observations from multiple variables.\n\n``` r\ngather(data, key = \"key\", value = \"value\", ...)\n```\n\n> Gather takes multiple columns and collapses into key-value pairs,\n> duplicating all other columns as needed. You use `gather()` when you\n> notice that your column names are not names of variables, but *values*\n> of a variable.\n\n![](https://raw.githubusercontent.com/gadenbuie/tidyexplain/main/images/tidyr-spread-gather.gif)\n\n``` r\ngather(wide, key, val, x:z)\n#> # A tibble: 6 × 3\n#>      id key   val  \n#>   <int> <chr> <chr>\n#> 1     1 x     a    \n#> 2     2 x     b    \n#> 3     1 y     c    \n#> 4     2 y     d    \n#> 5     1 z     e    \n#> 6     2 z     f\nspread(long, key, val)\n#> # A tibble: 2 × 4\n#>      id x     y     z    \n#>   <int> <chr> <chr> <chr>\n#> 1     1 a     c     e    \n#> 2     2 b     d     f\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}